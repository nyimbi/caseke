# coding: utf-8
# AUTOGENERATED BY gen_script.sh
from sqlalchemy import func
from flask_appbuilder import Model
from flask_appbuilder.models.mixins import AuditMixin, FileColumn, ImageColumn
from flask_appbuilder.models.decorators import renders
from sqlalchemy_utils import aggregated
from sqlalchemy.orm import relationship, query, defer, deferred

from sqlalchemy import (Column, Integer, String, ForeignKey,
	Sequence, Float, Text, BigInteger, Date,
	DateTime, Time, Boolean, CheckConstraint,
	UniqueConstraint, LargeBinary, Table)
from datetime import timedelta, datetime, date
from .mixins import *




class Actiontype(RefTypeMixin, AuditMixin, Model):
    __tablename__ = 'actiontype'

    id = Column(Integer, primary_key=True, autoincrement=True)


class Attorney(AuditMixin, Model):
    __tablename__ = 'attorney'

    id = Column(Integer, primary_key=True, autoincrement=True)
    law_firm = Column(ForeignKey(u'lawfirm.id'), index=True)

    lawfirm = relationship(u'Lawfirm', primaryjoin='Attorney.law_firm == Lawfirm.id', backref=u'attorneys')
    hearing = relationship(u'Hearing', secondary=t_attorney_hearing, backref=u'attorneys')


t_attorney_hearing = Table(
    'attorney_hearing',
    Column('attorney', ForeignKey(u'attorney.id'), primary_key=True, nullable=False),
    Column('hearing', ForeignKey(u'hearing.id'), primary_key=True, nullable=False, index=True)
)


class Bail(AuditMixin, Model):
    __tablename__ = 'bail'

    id = Column(Integer, primary_key=True, autoincrement=True)
    hearing = Column(ForeignKey(u'hearing.id'), nullable=False, index=True)
    defendant = Column(ForeignKey(u'defendant.id'), nullable=False, index=True)
    amountgranted = Column(Float(53), nullable=False)
    noofsureties = Column(Integer, nullable=False)
    paid = Column(Boolean, nullable=False)
    paydate = Column(Date, nullable=False)
    receiptno = Column(String(100), nullable=False)

    defendant1 = relationship(u'Defendant', primaryjoin='Bail.defendant == Defendant.id', backref=u'bails')
    hearing1 = relationship(u'Hearing', primaryjoin='Bail.hearing == Hearing.id', backref=u'bails')
    surety = relationship(u'Surety', secondary=t_bail_surety, backref=u'bails')


t_bail_surety = Table(
    'bail_surety',
    Column('bail', ForeignKey(u'bail.id'), primary_key=True, nullable=False),
    Column('surety', ForeignKey(u'surety.id'), primary_key=True, nullable=False, index=True)
)


class Case(AuditMixin, Model):
    __tablename__ = 'case'

    id = Column(Integer, primary_key=True, autoincrement=True)
    casename = Column(String(200), nullable=False)
    investigationassigmentdate = Column(DateTime)
    investigationassignmentnote = Column(Text, nullable=False)
    investigationplan = Column(Text, nullable=False)
    initialreport = Column(Text, nullable=False)
    priority = Column(Integer, nullable=False)
    findings = Column(Text, nullable=False)
    agadvicerequested = Column(Boolean, nullable=False)
    sendtotrial = Column(Boolean, nullable=False)
    chargedate = Column(DateTime)
    taketotrial = Column(Boolean, nullable=False)
    caseclosed = Column(Boolean, nullable=False)
    judgement = Column(Text, nullable=False)
    closeddate = Column(Date, nullable=False)
    sentencelength = Column(Integer, nullable=False)
    sentencestartdate = Column(Date, nullable=False)
    sentenceexpirydate = Column(Date, nullable=False)
    fineamount = Column(Float(53), nullable=False)
    caseappealed = Column(Boolean, nullable=False)
    appealdate = Column(DateTime, nullable=False)

    natureofsuit = relationship(u'Natureofsuit', secondary=t_case_natureofsuit, backref=u'cases')
    plaintiff = relationship(u'Plaintiff', secondary=t_case_plaintiff, backref=u'cases')
    policeman = relationship(u'Policeman', secondary=t_case_policeman_2, backref=u'policeman_cases')
    prosecutor = relationship(u'Prosecutor', secondary=t_case_prosecutor, backref=u'cases')
    witness = relationship(u'Witnes', secondary=t_case_witness, backref=u'cases')
    policeman1 = relationship(u'Policeman', secondary=t_case_policeman, backref=u'policeman_cases_0')
    policestation = relationship(u'Policestation', secondary=t_case_policestation, backref=u'cases')
    defendant = relationship(u'Defendant', secondary=t_case_defendant, backref=u'cases')


t_case_defendant = Table(
    'case_defendant',
    Column('case', ForeignKey(u'case.id'), primary_key=True, nullable=False),
    Column('defendant', ForeignKey(u'defendant.id'), primary_key=True, nullable=False, index=True)
)


t_case_natureofsuit = Table(
    'case_natureofsuit',
    Column('case', ForeignKey(u'case.id'), primary_key=True, nullable=False),
    Column('natureofsuit', ForeignKey(u'natureofsuit.id'), primary_key=True, nullable=False, index=True)
)


t_case_plaintiff = Table(
    'case_plaintiff',
    Column('case', ForeignKey(u'case.id'), primary_key=True, nullable=False),
    Column('plaintiff', ForeignKey(u'plaintiff.id'), primary_key=True, nullable=False, index=True)
)


t_case_policeman = Table(
    'case_policeman',
    Column('case', ForeignKey(u'case.id'), primary_key=True, nullable=False),
    Column('policeman', ForeignKey(u'policeman.id'), primary_key=True, nullable=False, index=True)
)


t_case_policeman_2 = Table(
    'case_policeman_2',
    Column('case', ForeignKey(u'case.id'), primary_key=True, nullable=False),
    Column('policeman', ForeignKey(u'policeman.id'), primary_key=True, nullable=False, index=True)
)


t_case_policestation = Table(
    'case_policestation',
    Column('case', ForeignKey(u'case.id'), primary_key=True, nullable=False),
    Column('policestation', ForeignKey(u'policestation.id'), primary_key=True, nullable=False, index=True)
)


t_case_prosecutor = Table(
    'case_prosecutor',
    Column('case', ForeignKey(u'case.id'), primary_key=True, nullable=False),
    Column('prosecutor', ForeignKey(u'prosecutor.id'), primary_key=True, nullable=False, index=True)
)


t_case_witness = Table(
    'case_witness',
    Column('case', ForeignKey(u'case.id'), primary_key=True, nullable=False),
    Column('witness', ForeignKey(u'witness.id'), primary_key=True, nullable=False, index=True)
)


class Causeofaction(AuditMixin, Model):
    __tablename__ = 'causeofaction'

    id = Column(Integer, primary_key=True, autoincrement=True)
    action_type = Column(ForeignKey(u'actiontype.id'), index=True)

    actiontype = relationship(u'Actiontype', primaryjoin='Causeofaction.action_type == Actiontype.id', backref=u'causeofactions')
    filing = relationship(u'Filing', secondary=t_causeofaction_filing, backref=u'causeofactions')
    hearing = relationship(u'Hearing', secondary=t_causeofaction_hearing, backref=u'causeofactions')


t_causeofaction_filing = Table(
    'causeofaction_filing',
    Column('causeofaction', ForeignKey(u'causeofaction.id'), primary_key=True, nullable=False),
    Column('filing', ForeignKey(u'filing.id'), primary_key=True, nullable=False, index=True)
)


t_causeofaction_hearing = Table(
    'causeofaction_hearing',
    Column('causeofaction', ForeignKey(u'causeofaction.id'), primary_key=True, nullable=False),
    Column('hearing', ForeignKey(u'hearing.id'), primary_key=True, nullable=False, index=True)
)


class Constituency(AuditMixin, Model):
    __tablename__ = 'constituency'

    id = Column(Integer, primary_key=True, autoincrement=True)
    county = Column(ForeignKey(u'county.id'), nullable=False, index=True)
    town = Column(ForeignKey(u'town.id'), index=True)

    county1 = relationship(u'County', primaryjoin='Constituency.county == County.id', backref=u'constituencies')
    town1 = relationship(u'Town', primaryjoin='Constituency.town == Town.id', backref=u'constituencies')


class County(AuditMixin, Model):
    __tablename__ = 'county'

    id = Column(Integer, primary_key=True, autoincrement=True)


class Court(AuditMixin, Model):
    __tablename__ = 'court'

    id = Column(Integer, primary_key=True, autoincrement=True)
    town = Column(ForeignKey(u'town.id'), nullable=False, index=True)
    residentmagistrate = Column(String(100))
    registrar = Column(String(100), nullable=False)
    court_level = Column(ForeignKey(u'courtlevel.id'), nullable=False, index=True)

    courtlevel = relationship(u'Courtlevel', primaryjoin='Court.court_level == Courtlevel.id', backref=u'courts')
    town1 = relationship(u'Town', primaryjoin='Court.town == Town.id', backref=u'courts')


class Courtlevel(AuditMixin, Model):
    __tablename__ = 'courtlevel'

    id = Column(Integer, primary_key=True, autoincrement=True)


class Defendant(AuditMixin, Model):
    __tablename__ = 'defendant'

    id = Column(Integer, primary_key=True, autoincrement=True)

    hearing = relationship(u'Hearing', secondary=t_defendant_hearing, backref=u'defendants')


t_defendant_hearing = Table(
    'defendant_hearing',
    Column('defendant', ForeignKey(u'defendant.id'), primary_key=True, nullable=False),
    Column('hearing', ForeignKey(u'hearing.id'), primary_key=True, nullable=False, index=True)
)


class Doctemplate(AuditMixin, Model):
    __tablename__ = 'doctemplate'

    id = Column(Integer, primary_key=True, autoincrement=True)
    template = Column(Text, nullable=False)
    templatejson = Column(JSON, nullable=False)


class Document(AuditMixin, Model):
    __tablename__ = 'document'

    id = Column(Integer, primary_key=True, autoincrement=True)
    mimetype = Column(String(100), nullable=False)
    doctype = Column(Text, nullable=False)
    doc = Column(Text, nullable=False)
    docbin = Column(LargeBinary, nullable=False)
    docthumbnail = Column(LargeBinary, nullable=False)
    doc_template = Column(ForeignKey(u'doctemplate.id'), index=True)
    docjson = Column(JSON, nullable=False)
    pagecount = Column(Integer, nullable=False)

    doctemplate = relationship(u'Doctemplate', primaryjoin='Document.doc_template == Doctemplate.id', backref=u'documents')
    filing = relationship(u'Filing', secondary=t_document_filing, backref=u'documents')


t_document_filing = Table(
    'document_filing',
    Column('document', ForeignKey(u'document.id'), primary_key=True, nullable=False),
    Column('filing', ForeignKey(u'filing.id'), primary_key=True, nullable=False, index=True)
)


class Filing(AuditMixin, Model):
    __tablename__ = 'filing'

    id = Column(Integer, primary_key=True, autoincrement=True)
    filedate = Column(DateTime, nullable=False)
    totalfees = Column(Float(53), nullable=False)
    filing_attorney = Column(ForeignKey(u'attorney.id'), nullable=False, index=True)
    filing_prosecutor = Column(ForeignKey(u'prosecutor.id'), nullable=False, index=True)
    receiptnumber = Column(Text)
    receiptverified = Column(Boolean, nullable=False)
    amountpaid = Column(Float(53), nullable=False)
    feebalance = Column(Float(53), nullable=False)

    attorney = relationship(u'Attorney', primaryjoin='Filing.filing_attorney == Attorney.id', backref=u'filings')
    prosecutor = relationship(u'Prosecutor', primaryjoin='Filing.filing_prosecutor == Prosecutor.id', backref=u'filings')
    filingtype = relationship(u'Filingtype', secondary=t_filing_filingtype, backref=u'filings')
    hearing = relationship(u'Hearing', secondary=t_filing_hearing, backref=u'filings')


t_filing_filingtype = Table(
    'filing_filingtype',
    Column('filing', ForeignKey(u'filing.id'), primary_key=True, nullable=False),
    Column('filingtype', ForeignKey(u'filingtype.id'), primary_key=True, nullable=False, index=True)
)


t_filing_hearing = Table(
    'filing_hearing',
    Column('filing', ForeignKey(u'filing.id'), primary_key=True, nullable=False),
    Column('hearing', ForeignKey(u'hearing.id'), primary_key=True, nullable=False, index=True)
)


class Filingtype(RefTypeMixin, AuditMixin, Model):
    __tablename__ = 'filingtype'

    id = Column(Integer, primary_key=True, autoincrement=True)
    cost = Column(Float(53), nullable=False)


class Hearing(AuditMixin, Model):
    __tablename__ = 'hearing'

    id = Column(Integer, primary_key=True, autoincrement=True)
    hearingdate = Column(DateTime, nullable=False)
    case = Column(ForeignKey(u'case.id'), nullable=False, index=True)
    court = Column(ForeignKey(u'court.id'), nullable=False, index=True)
    hearing_type = Column(ForeignKey(u'hearingtype.id'), nullable=False, index=True)
    remandwarrant = Column(Text, nullable=False)
    remandlength = Column(Integer)
    remanddate = Column(Date, nullable=False)
    remandwarrantexpirydate = Column(Date, nullable=False)
    nexthearingdate = Column(Date)
    finalhearing = Column(Boolean, nullable=False)
    transcript = Column(Text, nullable=False)
    audio = Column(LargeBinary, nullable=False)
    video = Column(LargeBinary, nullable=False)

    case1 = relationship(u'Case', primaryjoin='Hearing.case == Case.id', backref=u'hearings')
    court1 = relationship(u'Court', primaryjoin='Hearing.court == Court.id', backref=u'hearings')
    hearingtype = relationship(u'Hearingtype', primaryjoin='Hearing.hearing_type == Hearingtype.id', backref=u'hearings')
    witness = relationship(u'Witnes', secondary=t_hearing_witness, backref=u'hearings')
    prosecutor = relationship(u'Prosecutor', secondary=t_hearing_prosecutor, backref=u'hearings')
    judge = relationship(u'Judge', secondary=t_hearing_judge, backref=u'hearings')
    policeman = relationship(u'Policeman', secondary=t_hearing_policeman, backref=u'hearings')


t_hearing_judge = Table(
    'hearing_judge',
    Column('hearing', ForeignKey(u'hearing.id'), primary_key=True, nullable=False),
    Column('judge', ForeignKey(u'judge.id'), primary_key=True, nullable=False, index=True)
)


t_hearing_policeman = Table(
    'hearing_policeman',
    Column('hearing', ForeignKey(u'hearing.id'), primary_key=True, nullable=False),
    Column('policeman', ForeignKey(u'policeman.id'), primary_key=True, nullable=False, index=True)
)


t_hearing_prosecutor = Table(
    'hearing_prosecutor',
    Column('hearing', ForeignKey(u'hearing.id'), primary_key=True, nullable=False),
    Column('prosecutor', ForeignKey(u'prosecutor.id'), primary_key=True, nullable=False, index=True)
)


t_hearing_witness = Table(
    'hearing_witness',
    Column('hearing', ForeignKey(u'hearing.id'), primary_key=True, nullable=False),
    Column('witness', ForeignKey(u'witness.id'), primary_key=True, nullable=False, index=True)
)


class Hearingtype(RefTypeMixin, AuditMixin, Model):
    __tablename__ = 'hearingtype'

    id = Column(Integer, primary_key=True, autoincrement=True)


class Investigation(AuditMixin, Model):
    __tablename__ = 'investigation'

    id = Column(Integer, primary_key=True, autoincrement=True)
    case = Column(ForeignKey(u'case.id'), nullable=False, index=True)
    actiondate = Column(DateTime, nullable=False)
    evidence = Column(Text, nullable=False)
    narrative = Column(Text, nullable=False)

    case1 = relationship(u'Case', primaryjoin='Investigation.case == Case.id', backref=u'investigations')
    policeman = relationship(u'Policeman', secondary=t_investigation_policeman, backref=u'investigations')
    witness = relationship(u'Witnes', secondary=t_investigation_witness, backref=u'investigations')


t_investigation_policeman = Table(
    'investigation_policeman',
    Column('investigation', ForeignKey(u'investigation.id'), primary_key=True, nullable=False),
    Column('policeman', ForeignKey(u'policeman.id'), primary_key=True, nullable=False, index=True)
)


t_investigation_witness = Table(
    'investigation_witness',
    Column('investigation', ForeignKey(u'investigation.id'), primary_key=True, nullable=False),
    Column('witness', ForeignKey(u'witness.id'), primary_key=True, nullable=False, index=True)
)


class Judge(AuditMixin, Model):
    __tablename__ = 'judge'

    id = Column(Integer, primary_key=True, autoincrement=True)
    court = Column(ForeignKey(u'court.id'), nullable=False, index=True)

    court1 = relationship(u'Court', primaryjoin='Judge.court == Court.id', backref=u'judges')


class Lawfirm(AuditMixin, Model):
    __tablename__ = 'lawfirm'

    id = Column(Integer, primary_key=True, autoincrement=True)


class Natureofsuit(AuditMixin, Model):
    __tablename__ = 'natureofsuit'

    id = Column(Integer, primary_key=True, autoincrement=True)


class Plaintiff(AuditMixin, Model):
    __tablename__ = 'plaintiff'

    id = Column(Integer, primary_key=True, autoincrement=True)


class Policeman(AuditMixin, Model):
    __tablename__ = 'policeman'

    id = Column(Integer, primary_key=True, autoincrement=True)

    policerole = relationship(u'Policerole', secondary=t_policerole_policeman, backref=u'policemen')


class Policerole(AuditMixin, Model):
    __tablename__ = 'policerole'

    id = Column(Integer, primary_key=True, autoincrement=True)


t_policerole_policeman = Table(
    'policerole_policeman',
    Column('policerole', ForeignKey(u'policerole.id'), primary_key=True, nullable=False),
    Column('policeman', ForeignKey(u'policeman.id'), primary_key=True, nullable=False, index=True)
)


class Policestation(AuditMixin, Model):
    __tablename__ = 'policestation'

    id = Column(Integer, primary_key=True, autoincrement=True)
    town = Column(ForeignKey(u'town.id'), nullable=False, index=True)
    officercommanding = Column(String(100))

    town1 = relationship(u'Town', primaryjoin='Policestation.town == Town.id', backref=u'policestations')


class Prison(AuditMixin, Model):
    __tablename__ = 'prison'

    id = Column(Integer, primary_key=True, autoincrement=True)
    town = Column(ForeignKey(u'town.id'), nullable=False, index=True)
    warden = Column(String(100))

    town1 = relationship(u'Town', primaryjoin='Prison.town == Town.id', backref=u'prisons')


class Prisonremand(AuditMixin, Model):
    __tablename__ = 'prisonremand'

    prison = Column(ForeignKey(u'prison.id'), primary_key=True, nullable=False)
    warrantno = Column(String(100), primary_key=True, nullable=False)
    hearing = Column(ForeignKey(u'hearing.id'), nullable=False, index=True)
    defendant = Column(ForeignKey(u'defendant.id'), nullable=False, index=True)
    warrantduration = Column(Integer, nullable=False)
    warrantdate = Column(DateTime, nullable=False)
    warrant = Column(Text, nullable=False)
    warrantexpiry = Column(DateTime, nullable=False)
    history = Column(Text, nullable=False)

    defendant1 = relationship(u'Defendant', primaryjoin='Prisonremand.defendant == Defendant.id', backref=u'prisonremands')
    hearing1 = relationship(u'Hearing', primaryjoin='Prisonremand.hearing == Hearing.id', backref=u'prisonremands')
    prison1 = relationship(u'Prison', primaryjoin='Prisonremand.prison == Prison.id', backref=u'prisonremands')


class Prosecutor(AuditMixin, Model):
    __tablename__ = 'prosecutor'

    id = Column(Integer, primary_key=True, autoincrement=True)

    prosecutorteam = relationship(u'Prosecutorteam', secondary=t_prosecutor_prosecutorteam, backref=u'prosecutors')


t_prosecutor_prosecutorteam = Table(
    'prosecutor_prosecutorteam',
    Column('prosecutor', ForeignKey(u'prosecutor.id'), primary_key=True, nullable=False),
    Column('prosecutorteam', ForeignKey(u'prosecutorteam.id'), primary_key=True, nullable=False, index=True)
)


class Prosecutorteam(AuditMixin, Model):
    __tablename__ = 'prosecutorteam'

    id = Column(Integer, primary_key=True, autoincrement=True)


class Subcounty(AuditMixin, Model):
    __tablename__ = 'subcounty'

    id = Column(Integer, primary_key=True, autoincrement=True)
    county = Column(ForeignKey(u'county.id'), nullable=False, index=True)

    county1 = relationship(u'County', primaryjoin='Subcounty.county == County.id', backref=u'subcounties')


class Surety(AuditMixin, Model):
    __tablename__ = 'surety'

    id = Column(Integer, primary_key=True, autoincrement=True)


class Town(AuditMixin, Model):
    __tablename__ = 'town'

    id = Column(Integer, primary_key=True, autoincrement=True)
    subcounty = Column(ForeignKey(u'subcounty.id'), nullable=False, index=True)

    subcounty1 = relationship(u'Subcounty', primaryjoin='Town.subcounty == Subcounty.id', backref=u'towns')


class Witnes(AuditMixin, Model):
    __tablename__ = 'witness'

    id = Column(Integer, primary_key=True, autoincrement=True)
    fordefense = Column(Boolean, nullable=False)
