# coding: utf-8
# AUTOGENERATED BY gen_script.sh from kp4.py
# Copyright (C) Nyimbi Odero, Sun Aug 13 05:04:25 EAT 2017

from sqlalchemy import func
from flask_appbuilder import Model
from flask_appbuilder.models.mixins import AuditMixin, FileColumn, ImageColumn, UserExtensionMixin
from flask_appbuilder.models.decorators import renders
from flask_appbuilder.filemanager import ImageManager
from sqlalchemy_utils import aggregated, force_auto_coercion, observes
from sqlalchemy.orm import column_property
# Versioning Mixin
from sqlalchemy_continuum import make_versioned
#Add __versioned__ = {}




#Searchability look at DocMixin
from sqlalchemy_utils.types import TSVectorType   #Searchability look at DocMixin
from sqlalchemy_searchable import make_searchable

# ActiveRecord Model Features
from sqlalchemy_mixins import AllFeaturesMixin, ActiveRecordMixin

from sqlalchemy.orm import relationship, query, defer, deferred
# IMPORT Postgresql Specific Types
from sqlalchemy.dialects.postgresql import (
    ARRAY, BIGINT, BIT, BOOLEAN, BYTEA, CHAR, CIDR, DATE,
    DOUBLE_PRECISION, ENUM, FLOAT, HSTORE, INET, INTEGER,
    INTERVAL, JSON, JSONB, MACADDR, NUMERIC, OID, REAL, SMALLINT, TEXT,
    TIME, TIMESTAMP, UUID, VARCHAR, INT4RANGE, INT8RANGE, NUMRANGE,
    DATERANGE, TSRANGE, TSTZRANGE, TSVECTOR )

from sqlalchemy.dialects.postgresql import aggregate_order_by

from sqlalchemy import (Column, Integer, String, ForeignKey,
    Sequence, Float, Text, BigInteger, Date,
    DateTime, Time, Boolean, Index, CheckConstraint,
    UniqueConstraint,ForeignKeyConstraint, Numeric, LargeBinary , Table)
from datetime import timedelta, datetime, date
from sqlalchemy.dialects.postgresql import *
from sqlalchemy.sql import func
from .mixins import *

# Here is how to extend the User model
#class UserExtended(Model, UserExtensionMixin):
#    contact_group_id = Column(Integer, ForeignKey('contact_group.id'), nullable=True)
#    contact_group = relationship('ContactGroup')

# UTILITY CLASSES

import arrow, enum, datetime

# Initialize sqlalchemy_utils
#force_auto_coercion()

# Keep versions of all data
make_versioned()
make_searchable()

def future_date(days):
    return datetime.datetime.now() + datetime.timedelta(days=days)


bail_columns = ['defendant1','hearing','amountgranted','paid']
class Bail(AuditMixin, Model):
    __versioned__ = {}
    __tablename__ = 'bail'

    id = Column(Integer, primary_key=True, autoincrement=True)
    hearing = Column(ForeignKey(u'hearing.id'), nullable=False, index=True)
    defendant = Column(ForeignKey(u'defendant.id'), nullable=False, index=True)
    amountgranted = Column(Numeric(12, 2))
    noofsureties = Column(Integer, default=1)
    paid = Column(Boolean)
    paydate = Column(Date)

    defendant1 = relationship(u'Defendant', primaryjoin='Bail.defendant == Defendant.id', backref=u'bails')
    hearing1 = relationship(u'Hearing', primaryjoin='Bail.hearing == Hearing.id', backref=u'bails')
    surety = relationship(u'Surety', secondary='bail_surety', backref=u'bails')


bail_surety = Table(
    'bail_surety', Model.metadata,
    Column('bail', ForeignKey(u'bail.id'), primary_key=True, nullable=False),
    Column('surety', ForeignKey(u'surety.id'), primary_key=True, nullable=False, index=True)
)

case_columns_police = ['born_digital','report_date','policestation','ob_number','plaintiff','defendant' ]
case_columns_court = ['born_digital','docketnumber','casename','chargedate', 'casecategory','caseclosed']

casep_fieldset = [
	('Activity', {'fields': ['action', 'activity_description', 'status']}),
	('Budget', {'fields': ['budget', 'spend_td']}),
	('Start', {'fields': ['planned_start', 'start_notes']}),
	('End', {'fields': ['planned_end', 'end_notes'], 'expanded': False}),
	
	('Details', {'fields': ['task_group', 'segment', 'priority'], 'expanded': False}),
	('Tracking', {'fields': ['not_started', 'planned_start', 'actual_start', 'planned_end', 'actual_end', 'completed'],
	              'expanded': False}),
	('Contingency', {'fields': ['contingency_plan'], 'expanded': False}),
	]

class Case(ActivityMixin, AuditMixin, NameMixin, Model):
    __versioned__ = {}
    __tablename__ = 'case'

    id = Column(Integer, primary_key=True, autoincrement=True)
    born_digital = Column(Boolean, default=False)
    ob_number = Column(String(20), nullable=False)
    police_station_reported = Column(ForeignKey(u'policestation.id'), nullable=False, index=True)
    report_date = Column(DateTime, default=func.now())
    complaint = Column(Text, nullable=False)
    is_criminal = Column(Boolean, nullable=True, default=True)
    priority = Column(Integer, default=5)
    should_investigate_further =Column(Boolean)
    evaluation_conclusion = Column(Text)
    investigation_assigment_date = Column(DateTime, default=func.now())
    investigation_assignment_note = Column(Text)
    investigation_plan = Column(Text)
    investigation_summary = Column(Text)
    investigation_review = Column(Text)
    investigation_complete = Column(Boolean)
    
    dpp_advice_requested = Column(Boolean)
    dpp_advice_request_date = Column(Date)
    dpp_advice_date = Column(Date)
    dpp_advice = Column(Text)
    send_to_trial = Column(Boolean, default=False)
    case_name = Column(String(400), default='Republic Vs ')
    # gen_casename = column_property('Republic vs '+ plaintiff)
    docketnumber = Column(String(100))
    charge_sheet = Column(Text)
    charge_date = Column(DateTime, default=func.now())
    prosecution_notes = Column(Text)
    defense_notes = Column(Text)
    judgement = Column(Text)
    judgement_date = Column(DateTime, default=func.now(), onupdate=func.now())
    sentence_length_years = Column(Integer)
    sentence_length_months = Column(Integer)
    senetence_length_days = Column(Integer)
    sentence_start_date = Column(Date)
    sentence_end_date = Column(Date)
    fine_amount = Column(Numeric(12, 2))
    case_appealed = Column(Boolean)
    appeal_date = Column(DateTime, default=func.now())
    appeal_granted = Column(Boolean, default=False)
    appeal_expiry = Column(Date)
    case_closed = Column(Boolean)
    close_date = Column(Date)
    reported_to = Column(ForeignKey(u'polofficer.id'), index=True)

    policestation = relationship(u'Policestation', primaryjoin='Case.police_station_reported == Policestation.id', backref=u'cases')
    polofficer = relationship(u'Polofficer', primaryjoin='Case.reported_to == Polofficer.id', backref=u'polofficer_polofficer_cases')
    natureofsuit = relationship(u'Natureofsuit', secondary='case_natureofsuit', backref=u'cases')
    polofficer1 = relationship(u'Polofficer', secondary='case_polofficer', backref=u'polofficer_polofficer_cases_0')
    polofficer2 = relationship(u'Polofficer', secondary='caseinvestigation', backref=u'polofficer_polofficer_cases_1')
    casecategory = relationship(u'Casecategory', secondary='case_casecategory', backref=u'cases')
    defendant = relationship(u'Defendant', secondary='case_defendant', backref=u'cases')
    prosecutor = relationship(u'Prosecutor', secondary='case_prosecutor', backref=u'prosecutor_cases')
    tags = relationship(u'Tag', secondary='case_tag', backref=u'cases')
    plaintiff = relationship(u'Plaintiff', secondary='case_plaintiff', backref=u'cases')
    witness = relationship(u'Witnes', secondary='case_witness', backref=u'cases')
    prosecutor1 = relationship(u'Prosecutor', secondary='case_prosecutor_2', backref=u'prosecutor_cases_0')
    causeofaction = relationship(u'Causeofaction', secondary='case_causeofaction', backref=u'cases')


case_casecategory = Table(
    'case_casecategory', Model.metadata,
    Column('case', ForeignKey(u'case.id'), primary_key=True, nullable=False),
    Column('casecategory', ForeignKey(u'casecategory.id'), primary_key=True, nullable=False, index=True)
)


case_causeofaction = Table(
    'case_causeofaction', Model.metadata,
    Column('case', ForeignKey(u'case.id'), primary_key=True, nullable=False),
    Column('causeofaction', ForeignKey(u'causeofaction.id'), primary_key=True, nullable=False, index=True)
)


case_defendant = Table(
    'case_defendant', Model.metadata,
    Column('case', ForeignKey(u'case.id'), primary_key=True, nullable=False),
    Column('defendant', ForeignKey(u'defendant.id'), primary_key=True, nullable=False, index=True)
)


case_natureofsuit = Table(
    'case_natureofsuit', Model.metadata,
    Column('case', ForeignKey(u'case.id'), primary_key=True, nullable=False),
    Column('natureofsuit', ForeignKey(u'natureofsuit.id'), primary_key=True, nullable=False, index=True)
)


case_plaintiff = Table(
    'case_plaintiff', Model.metadata,
    Column('case', ForeignKey(u'case.id'), primary_key=True, nullable=False),
    Column('plaintiff', ForeignKey(u'plaintiff.id'), primary_key=True, nullable=False, index=True)
)


case_polofficer = Table(
    'case_polofficer', Model.metadata,
    Column('case', ForeignKey(u'case.id'), primary_key=True, nullable=False),
    Column('polofficer', ForeignKey(u'polofficer.id'), primary_key=True, nullable=False, index=True)
)


case_prosecutor = Table(
    'case_prosecutor', Model.metadata,
    Column('case', ForeignKey(u'case.id'), primary_key=True, nullable=False),
    Column('prosecutor', ForeignKey(u'prosecutor.id'), primary_key=True, nullable=False, index=True)
)


case_prosecutor_2 = Table(
    'case_prosecutor_2', Model.metadata,
    Column('case', ForeignKey(u'case.id'), primary_key=True, nullable=False),
    Column('prosecutor', ForeignKey(u'prosecutor.id'), primary_key=True, nullable=False, index=True)
)


case_tag = Table(
    'case_tag', Model.metadata,
    Column('case', ForeignKey(u'case.id'), primary_key=True, nullable=False),
    Column('tag', ForeignKey(u'tag.id'), primary_key=True, nullable=False, index=True)
)


case_witness = Table(
    'case_witness', Model.metadata,
    Column('case', ForeignKey(u'case.id'), primary_key=True, nullable=False),
    Column('witness', ForeignKey(u'witness.id'), primary_key=True, nullable=False, index=True)
)


class Casecategory(RefTypeMixin, AuditMixin, Model):
    __versioned__ = {}
    __tablename__ = 'casecategory'

    id = Column(Integer, primary_key=True, autoincrement=True)
    indictable = Column(Boolean)
    is_criminal = Column(Boolean, default=True)
    
    def __repr__(self):
	    return self.name


caseinvestigation = Table(
    'caseinvestigation', Model.metadata,
    Column('pol_officers', ForeignKey(u'polofficer.id'), primary_key=True, nullable=False),
    Column('cases', ForeignKey(u'case.id'), primary_key=True, nullable=False, index=True)
)


class Causeofaction(RefTypeMixin, AuditMixin, Model):
    __versioned__ = {}
    __tablename__ = 'causeofaction'

    id = Column(Integer, primary_key=True, autoincrement=True)
    criminal = Column(Boolean, nullable=False, default=True)
    parent_coa = Column(ForeignKey(u'causeofaction.id'), index=True)

    parent = relationship(u'Causeofaction', remote_side=[id], primaryjoin='Causeofaction.parent_coa == Causeofaction.id', backref=u'causeofactions')
    filing = relationship(u'Filing', secondary='causeofaction_filing', backref=u'causeofactions')
    hearing = relationship(u'Hearing', secondary='causeofaction_hearing', backref=u'causeofactions')


causeofaction_filing = Table(
    'causeofaction_filing', Model.metadata,
    Column('causeofaction', ForeignKey(u'causeofaction.id'), primary_key=True, nullable=False),
    Column('filing', ForeignKey(u'filing.id'), primary_key=True, nullable=False, index=True)
)


causeofaction_hearing = Table(
    'causeofaction_hearing', Model.metadata,
    Column('causeofaction', ForeignKey(u'causeofaction.id'), primary_key=True, nullable=False),
    Column('hearing', ForeignKey(u'hearing.id'), primary_key=True, nullable=False, index=True)
)


class Commitaltype(RefTypeMixin, AuditMixin, Model):
    __versioned__ = {}
    __tablename__ = 'commitaltype'

    id = Column(Integer, primary_key=True, autoincrement=True)

    prisoncommital = relationship(u'Prisoncommital', secondary='commitaltype_prisoncommital', backref=u'commitaltypes')


commitaltype_prisoncommital = Table(
    'commitaltype_prisoncommital', Model.metadata,
    Column('commitaltype', ForeignKey(u'commitaltype.id'), primary_key=True, nullable=False),
    Column('prisoncommital_prison', Integer, primary_key=True, nullable=False),
    Column('prisoncommital_warrantno', String(100), primary_key=True, nullable=False),
    ForeignKeyConstraint(['prisoncommital_prison', 'prisoncommital_warrantno'], [u'prisoncommital.prison', u'prisoncommital.warrantno']),
    Index('idx_commitaltype_prisoncommital', 'prisoncommital_prison', 'prisoncommital_warrantno')
)


class Constituency(RefTypeMixin, AuditMixin, Model):
    __versioned__ = {}
    __tablename__ = 'constituency'

    id = Column(Integer, primary_key=True, autoincrement=True)
    county = Column(ForeignKey(u'county.id'), nullable=False, index=True)
    town = Column(ForeignKey(u'town.id'), index=True)

    county1 = relationship(u'County', primaryjoin='Constituency.county == County.id', backref=u'constituencies')
    town1 = relationship(u'Town', primaryjoin='Constituency.town == Town.id', backref=u'constituencies')
    
    def __repr__(self):
        return self.name


class County(AuditMixin, RefTypeMixin, Model):
    __versioned__ = {}
    __tablename__ = 'county'

    id = Column(Integer, primary_key=True, autoincrement=True)
    
    def __repr__(self):
        return self.name


class Court(RefTypeMixin, AuditMixin, Model):
    __versioned__ = {}
    __tablename__ = 'court'

    id = Column(Integer, primary_key=True, autoincrement=True)
    court_station = Column(ForeignKey(u'courtstation.id'), nullable=False, index=True)

    courtstation = relationship(u'Courtstation', primaryjoin='Court.court_station == Courtstation.id', backref=u'courts')

    def __repr__(self):
        return self.name
  
class Courtlevel(RefTypeMixin, AuditMixin, Model):
    __versioned__ = {}
    __tablename__ = 'courtlevel'

    id = Column(Integer, primary_key=True, autoincrement=True)

    def __repr__(self):
        return self.name

class Courtstation(PlaceMixin, AuditMixin, Model):
    __versioned__ = {}
    __tablename__ = 'courtstation'

    id = Column(Integer, primary_key=True, autoincrement=True)
    residentmagistrate = Column(String(100))
    registrar = Column(String(100), nullable=False)
    court_level = Column(ForeignKey(u'courtlevel.id'), nullable=False, index=True)
    num_of_courts = Column(Integer)
    town = Column(ForeignKey(u'town.id'), nullable=False, index=True)

    courtlevel = relationship(u'Courtlevel', primaryjoin='Courtstation.court_level == Courtlevel.id', backref=u'courtstations')
    town1 = relationship(u'Town', primaryjoin='Courtstation.town == Town.id', backref=u'courtstations')

    def __repr__(self):
        return self.place_name
    

class Defendant(PersonMedicalMixin, PersonDocMixin, BiometricMixin, EmploymentMixin, PersonMixin, ContactMixin,  AuditMixin, Model):
    __versioned__ = {}
    __tablename__ = 'defendant'

    def ViewName(self):
        return self.__class__.__name__ +'View'

    def photo_img(self):
        im = ImageManager()
        vn = self.ViewName()
        if self.photo:
            return Markup('<a href="' + url_for(vn+'.show', pk=str(self.id)) +
                        '" class="thumbnail"><img src="' + im.get_url(self.photo) +
                        '" alt="Photo" class="img-rounded img-responsive"></a>')
        else:
            return Markup('<a href="' + url_for(vn, pk=str(self.id)) +
                        '" class="thumbnail"><img src="//:0" alt="Photo" class="img-responsive"></a>')

    def photo_img_thumbnail(self):
        im = ImageManager()
        vn = self.ViewName()
        if self.photo:
            return Markup('<a href="' + url_for(vn+'.show', pk=str(self.id)) +
                        '" class="thumbnail"><img src="' + im.get_url_thumbnail(self.photo) +
                        '" alt="Photo" class="img-rounded img-responsive"></a>')
        else:
            return Markup('<a href="' + url_for(vn, pk=str(self.id)) +
                        '" class="thumbnail"><img src="//:0" alt="Photo" class="img-responsive"></a>')


    def print_button(self):
        vn = self.ViewName()
        #pdf = render_pdf(url_for(vn, pk=str(self.id)))
        #pdf = pdfkit.from_string(url_for(vn, pk=str(self.id)))
        #response = make_response(pdf)
        #response.headers['Content-Type'] = 'application/pdf'
        #response.headers['Content-Disposition'] = 'inline; filename=output.pdf'

        return Markup(
            '<a href="' + url_for(vn) + '" class="btn btn-sm btn-primary" data-toggle="tooltip" rel="tooltip"'+
            'title="Print">' +
            '<i class="fa fa-edit"></i>' +
            '</a>')

    def audio_play(self):
        vn = self.ViewName()
        return Markup(
                '<audio controls autoplay>' +
                '<source  src="' + url_for(vn) + '" type="audio/mpeg"'> +'<i class="fa fa-volume-up"></i>' +
                'Your browser does not support the audio element.' +
                '</audio>'
                )
    # edit_form_extra_fields = {'field2': TextField('field2',
    #                             widget=BS3TextFieldROWidget())}
    id = Column(Integer, primary_key=True, autoincrement=True)
    juvenile = Column(Boolean, default=False)
    gender = Column(ForeignKey(u'gender.id'), nullable=False, index=True)
    prisoncell = Column(ForeignKey(u'prisoncell.id'), index=True)
    casecount = Column(Integer)

    gender1 = relationship(u'Gender', primaryjoin='Defendant.gender == Gender.id', backref=u'defendants')
    prisoncell1 = relationship(u'Prisoncell', primaryjoin='Defendant.prisoncell == Prisoncell.id', backref=u'defendants')
    medevent = relationship(u'Medevent', secondary='defendant_medevent', backref=u'defendants')
    gateregister = relationship(u'Gateregister', secondary='defendant_gateregister', backref=u'defendants')
    hearing = relationship(u'Hearing', secondary='defendant_hearing', backref=u'defendants')


defendant_gateregister = Table(
    'defendant_gateregister', Model.metadata,
    Column('defendant', ForeignKey(u'defendant.id'), primary_key=True, nullable=False),
    Column('gateregister', ForeignKey(u'gateregister.id'), primary_key=True, nullable=False, index=True)
)


defendant_hearing = Table(
    'defendant_hearing', Model.metadata,
    Column('defendant', ForeignKey(u'defendant.id'), primary_key=True, nullable=False),
    Column('hearing', ForeignKey(u'hearing.id'), primary_key=True, nullable=False, index=True)
)


defendant_medevent = Table(
    'defendant_medevent', Model.metadata,
    Column('defendant', ForeignKey(u'defendant.id'), primary_key=True, nullable=False),
    Column('medevent', ForeignKey(u'medevent.id'), primary_key=True, nullable=False, index=True)
)


class Discipline(ActivityMixin, AuditMixin, Model):
    __versioned__ = {}
    __tablename__ = 'discipline'

    id = Column(Integer, primary_key=True, autoincrement=True)
    defendant = Column(ForeignKey(u'defendant.id'), nullable=False, index=True)

    defendant1 = relationship(u'Defendant', primaryjoin='Discipline.defendant == Defendant.id', backref=u'disciplines')


class Docarchive(AuditMixin, Model):
    __versioned__ = {}
    __tablename__ = 'docarchive'

    id = Column(Integer, primary_key=True, autoincrement=True)
    name = Column(Text)
    doc = Column(Text)
    scandate = Column(DateTime, default=func.now())
    archival = Column(Boolean, default=True)

    tag = relationship(u'Tag', secondary='docarchive_tag', backref=u'docarchives')


docarchive_tag = Table(
    'docarchive_tag', Model.metadata,
    Column('docarchive', ForeignKey(u'docarchive.id'), primary_key=True, nullable=False),
    Column('tag', ForeignKey(u'tag.id'), primary_key=True, nullable=False, index=True)
)


class Doctemplate(DocMixin, RefTypeMixin, AuditMixin, Model):
    __versioned__ = {}
    __tablename__ = 'doctemplate'

    id = Column(Integer, primary_key=True, autoincrement=True)


class Document(DocMixin, AuditMixin, Model):
    __versioned__ = {}
    __tablename__ = 'document'

    id = Column(Integer, primary_key=True, autoincrement=True)
    filing = Column(ForeignKey(u'filing.id'), nullable=False, index=True)
    doc_template = Column(ForeignKey(u'doctemplate.id'), index=True)
    confidential = Column(Boolean)
    pagecount = Column(Integer)
    locked = Column(Boolean)
    hash = Column(Text)

    doctemplate = relationship(u'Doctemplate', primaryjoin='Document.doc_template == Doctemplate.id', backref=u'documents')
    filing1 = relationship(u'Filing', primaryjoin='Document.filing == Filing.id', backref=u'documents')
    tag = relationship(u'Tag', secondary='document_tag', backref=u'documents')


document_tag = Table(
    'document_tag', Model.metadata,
    Column('document', ForeignKey(u'document.id'), primary_key=True, nullable=False),
    Column('tag', ForeignKey(u'tag.id'), primary_key=True, nullable=False, index=True)
)


class Eventlog(AuditMixin, Model):
    __versioned__ = {}
    __tablename__ = 'eventlog'

    id = Column(Integer, primary_key=True, autoincrement=True)
    temporal = Column(DateTime, default=func.now())
    event = Column(Text)
    severity = Column(Integer)
    alert = Column(Boolean)
    notes = Column(Text)
    tbl = Column(Text)
    colname = Column(Text)
    colbefore = Column(Text)
    colafter = Column(Text)


class Filing(AuditMixin, Model):
    __versioned__ = {}
    __tablename__ = 'filing'

    id = Column(Integer, primary_key=True, autoincrement=True)
    uploaddate = Column(DateTime, default=func.now())
    pagecount = Column(Integer)
    totalfees = Column(Numeric(12, 2))
    filing_attorney = Column(ForeignKey(u'lawyers.id'), nullable=False, index=True)
    filing_prosecutor = Column(ForeignKey(u'prosecutor.id'), nullable=False, index=True)
    assessedfees = Column(Numeric(12, 2))
    receiptverified = Column(Boolean, default=False)
    amountpaid = Column(Numeric(12, 2), default=0.00)
    feebalance = Column(Numeric(12, 2), default=0.00)
    balance = column_property(totalfees - amountpaid)
    paymenthistory = Column(Text, nullable=False)
    case = Column(ForeignKey(u'case.id'), nullable=False, index=True)
    urgent = Column(Boolean, default=False)
    urgentreason = Column(Text)

    case1 = relationship(u'Case', primaryjoin='Filing.case == Case.id', backref=u'filings')
    lawyer = relationship(u'Lawyer', primaryjoin='Filing.filing_attorney == Lawyer.id', backref=u'filings')
    prosecutor = relationship(u'Prosecutor', primaryjoin='Filing.filing_prosecutor == Prosecutor.id', backref=u'filings')
    payment = relationship(u'Payment', secondary='filing_payment', backref=u'filings')
    filingtype = relationship(u'Filingtype', secondary='filing_filingtype', backref=u'filings')


filing_filingtype = Table(
    'filing_filingtype', Model.metadata,
    Column('filing', ForeignKey(u'filing.id'), primary_key=True, nullable=False),
    Column('filingtype', ForeignKey(u'filingtype.id'), primary_key=True, nullable=False, index=True)
)


filing_payment = Table(
    'filing_payment', Model.metadata,
    Column('filing', ForeignKey(u'filing.id'), primary_key=True, nullable=False),
    Column('payment', ForeignKey(u'payment.id'), primary_key=True, nullable=False, index=True)
)


class Filingtype(RefTypeMixin, AuditMixin, Model):
    __versioned__ = {}
    __tablename__ = 'filingtype'

    id = Column(Integer, primary_key=True, autoincrement=True)
    fees = Column(Numeric(12, 2), default=0.00)
    perpagecost = Column(Numeric(12, 2), default=0.00)
    paid_per_page = Column(Boolean, default=False)


class Gateregister(AuditMixin, Model):
    __versioned__ = {}
    __tablename__ = 'gateregister'

    id = Column(Integer, primary_key=True, autoincrement=True)
    prison = Column(ForeignKey(u'prison.id'), nullable=False, index=True)
    opentime = Column(DateTime, default=func.now())
    closedtime = Column(DateTime, default=func.now())
    openduration = Column(INTERVAL)
    movementdirection = Column(Boolean)
    reason = Column(Text)
    staffmovement = Column(Boolean)
    goodsmovement = Column(Text, nullable=False)
    vehicle_reg = Column(Text)
    vehicle_color = Column(Text, nullable=False)

    prison1 = relationship(u'Prison', primaryjoin='Gateregister.prison == Prison.id', backref=u'gateregisters')
    warder = relationship(u'Warder', secondary='gateregister_warder_2', backref=u'warder_gateregisters')
    warder1 = relationship(u'Warder', secondary='gateregister_warder', backref=u'warder_gateregisters_0')


gateregister_warder = Table(
    'gateregister_warder', Model.metadata,
    Column('gateregister', ForeignKey(u'gateregister.id'), primary_key=True, nullable=False),
    Column('warder', ForeignKey(u'warder.id'), primary_key=True, nullable=False, index=True)
)


gateregister_warder_2 = Table(
    'gateregister_warder_2', Model.metadata,
    Column('gateregister', ForeignKey(u'gateregister.id'), primary_key=True, nullable=False),
    Column('warder', ForeignKey(u'warder.id'), primary_key=True, nullable=False, index=True)
)


class Gender(RefTypeMixin, AuditMixin, Model):
    __versioned__ = {}
    __tablename__ = 'gender'

    id = Column(Integer, primary_key=True, autoincrement=True)
    name = Column(String(20), nullable=False, unique=True)

    # def __init__(self, name):
    #     self.name = name


class Hearing(ActivityMixin, AuditMixin, Model):
    __versioned__ = {}
    __tablename__ = 'hearing'

    id = Column(Integer, primary_key=True, autoincrement=True)
    hearingdate = Column(DateTime, nullable=False, default=func.now())
    adjourned = Column(Boolean, default=False)
    completed = Column(Boolean, default=False)
    case = Column(ForeignKey(u'case.id'), nullable=False, index=True)
    court = Column(ForeignKey(u'court.id'), nullable=False, index=True)
    remandwarrant = Column(Text)
    hearing_type = Column(ForeignKey(u'hearingtype.id'), nullable=False, index=True)
    remanddays = Column(Integer)
    remanddate = Column(Date)
    remandwarrantexpirydate = Column(Date)
    nexthearingdate = Column(Date)
    finalhearing = Column(Boolean, nullable=False)
    transcript = Column(Text)
    audio = Column(ImageColumn)
    video = Column(ImageColumn)

    case1 = relationship(u'Case', primaryjoin='Hearing.case == Case.id', backref=u'hearings')
    court1 = relationship(u'Court', primaryjoin='Hearing.court == Court.id', backref=u'hearings')
    hearingtype = relationship(u'Hearingtype', primaryjoin='Hearing.hearing_type == Hearingtype.id', backref=u'hearings')
    prosecutor = relationship(u'Prosecutor', secondary='hearing_prosecutor', backref=u'hearings')
    lawyers = relationship(u'Lawyer', secondary='hearing_lawyers', backref=u'hearings')
    judicialofficer = relationship(u'Judicialofficer', secondary='hearing_judicialofficer', backref=u'hearings')
    polofficer = relationship(u'Polofficer', secondary='hearing_polofficer', backref=u'hearings')
    witness = relationship(u'Witnes', secondary='hearing_witness', backref=u'hearings')
    tag = relationship(u'Tag', secondary='hearing_tag', backref=u'hearings')


hearing_judicialofficer = Table(
    'hearing_judicialofficer', Model.metadata,
    Column('hearing', ForeignKey(u'hearing.id'), primary_key=True, nullable=False),
    Column('judicialofficer', ForeignKey(u'judicialofficer.id'), primary_key=True, nullable=False, index=True)
)


hearing_lawyers = Table(
    'hearing_lawyers', Model.metadata,
    Column('hearing', ForeignKey(u'hearing.id'), primary_key=True, nullable=False),
    Column('lawyers', ForeignKey(u'lawyers.id'), primary_key=True, nullable=False, index=True)
)


hearing_polofficer = Table(
    'hearing_polofficer', Model.metadata,
    Column('hearing', ForeignKey(u'hearing.id'), primary_key=True, nullable=False),
    Column('polofficer', ForeignKey(u'polofficer.id'), primary_key=True, nullable=False, index=True)
)


hearing_prosecutor = Table(
    'hearing_prosecutor', Model.metadata,
    Column('hearing', ForeignKey(u'hearing.id'), primary_key=True, nullable=False),
    Column('prosecutor', ForeignKey(u'prosecutor.id'), primary_key=True, nullable=False, index=True)
)


hearing_tag = Table(
    'hearing_tag', Model.metadata,
    Column('hearing', ForeignKey(u'hearing.id'), primary_key=True, nullable=False),
    Column('tag', ForeignKey(u'tag.id'), primary_key=True, nullable=False, index=True)
)


hearing_witness = Table(
    'hearing_witness', Model.metadata,
    Column('hearing', ForeignKey(u'hearing.id'), primary_key=True, nullable=False),
    Column('witness', ForeignKey(u'witness.id'), primary_key=True, nullable=False, index=True)
)


class Hearingtype(RefTypeMixin, AuditMixin, Model):
    __versioned__ = {}
    __tablename__ = 'hearingtype'

    id = Column(Integer, primary_key=True, autoincrement=True)


class Investigation(PlaceMixin, AuditMixin, Model):
    __versioned__ = {}
    __tablename__ = 'investigation'

    id = Column(Integer, primary_key=True, autoincrement=True)
    case = Column(ForeignKey(u'case.id'), nullable=False, index=True)
    actiondate = Column(DateTime, default=func.now())
    evidence = Column(Text, nullable=False)
    narrative = Column(Text, nullable=False)
    weather = Column(Text, nullable=False)
    location = Column(Text, nullable=False)

    case1 = relationship(u'Case', primaryjoin='Investigation.case == Case.id', backref=u'investigations')
    polofficer = relationship(u'Polofficer', secondary='investigation_polofficer', backref=u'investigations')
    witness = relationship(u'Witnes', secondary='investigation_witness', backref=u'investigations')


investigation_polofficer = Table(
    'investigation_polofficer', Model.metadata,
    Column('investigation', ForeignKey(u'investigation.id'), primary_key=True, nullable=False),
    Column('polofficer', ForeignKey(u'polofficer.id'), primary_key=True, nullable=False, index=True)
)


investigation_witness = Table(
    'investigation_witness', Model.metadata,
    Column('investigation', ForeignKey(u'investigation.id'), primary_key=True, nullable=False),
    Column('witness', ForeignKey(u'witness.id'), primary_key=True, nullable=False, index=True)
)


class JoRank(RefTypeMixin, AuditMixin, Model):
    __versioned__ = {}
    __tablename__ = 'jo_rank'

    id = Column(Integer, primary_key=True, autoincrement=True)
    appelation = Column(Text, nullable=False)
    informaladdress = Column(Text, nullable=False)


class Judicialofficer(PersonMixin, ContactMixin,  AuditMixin, Model):
    __versioned__ = {}
    __tablename__ = 'judicialofficer'

    def ViewName(self):
        return self.__class__.__name__ +'View'

    def photo_img(self):
        im = ImageManager()
        vn = self.ViewName()
        if self.photo:
            return Markup('<a href="' + url_for(vn+'.show', pk=str(self.id)) +
                        '" class="thumbnail"><img src="' + im.get_url(self.photo) +
                        '" alt="Photo" class="img-rounded img-responsive"></a>')
        else:
            return Markup('<a href="' + url_for(vn, pk=str(self.id)) +
                        '" class="thumbnail"><img src="//:0" alt="Photo" class="img-responsive"></a>')

    def photo_img_thumbnail(self):
        im = ImageManager()
        vn = self.ViewName()
        if self.photo:
            return Markup('<a href="' + url_for(vn+'.show', pk=str(self.id)) +
                        '" class="thumbnail"><img src="' + im.get_url_thumbnail(self.photo) +
                        '" alt="Photo" class="img-rounded img-responsive"></a>')
        else:
            return Markup('<a href="' + url_for(vn, pk=str(self.id)) +
                        '" class="thumbnail"><img src="//:0" alt="Photo" class="img-responsive"></a>')


    def print_button(self):
        vn = self.ViewName()
        #pdf = render_pdf(url_for(vn, pk=str(self.id)))
        #pdf = pdfkit.from_string(url_for(vn, pk=str(self.id)))
        #response = make_response(pdf)
        #response.headers['Content-Type'] = 'application/pdf'
        #response.headers['Content-Disposition'] = 'inline; filename=output.pdf'

        return Markup(
            '<a href="' + url_for(vn) + '" class="btn btn-sm btn-primary" data-toggle="tooltip" rel="tooltip"'+
            'title="Print">' +
            '<i class="fa fa-edit"></i>' +
            '</a>')

    def audio_play(self):
        vn = self.ViewName()
        return Markup(
                '<audio controls autoplay>' +
                '<source  src="' + url_for(vn) + '" type="audio/mpeg"'> +'<i class="fa fa-volume-up"></i>' +
                'Your browser does not support the audio element.' +
                '</audio>'
                )
    # edit_form_extra_fields = {'field2': TextField('field2',
    #                             widget=BS3TextFieldROWidget())}
    id = Column(Integer, primary_key=True, autoincrement=True)
    j_o__rank = Column(ForeignKey(u'jo_rank.id'), nullable=False, index=True)
    gender = Column(ForeignKey(u'gender.id'), index=True)
    court = Column(ForeignKey(u'court.id'), nullable=False, index=True)

    court1 = relationship(u'Court', primaryjoin='Judicialofficer.court == Court.id', backref=u'judicialofficers')
    gender1 = relationship(u'Gender', primaryjoin='Judicialofficer.gender == Gender.id', backref=u'judicialofficers')
    jo_rank = relationship(u'JoRank', primaryjoin='Judicialofficer.j_o__rank == JoRank.id', backref=u'judicialofficers')


class Lawfirm(PlaceMixin, RefTypeMixin, AuditMixin, Model):
    __versioned__ = {}
    __tablename__ = 'lawfirm'

    id = Column(Integer, primary_key=True, autoincrement=True)


class Lawyer(PersonMixin, ContactMixin,  AuditMixin, Model):
    __versioned__ = {}
    __tablename__ = 'lawyers'

    def ViewName(self):
        return self.__class__.__name__ +'View'

    def photo_img(self):
        im = ImageManager()
        vn = self.ViewName()
        if self.photo:
            return Markup('<a href="' + url_for(vn+'.show', pk=str(self.id)) +
                        '" class="thumbnail"><img src="' + im.get_url(self.photo) +
                        '" alt="Photo" class="img-rounded img-responsive"></a>')
        else:
            return Markup('<a href="' + url_for(vn, pk=str(self.id)) +
                        '" class="thumbnail"><img src="//:0" alt="Photo" class="img-responsive"></a>')

    def photo_img_thumbnail(self):
        im = ImageManager()
        vn = self.ViewName()
        if self.photo:
            return Markup('<a href="' + url_for(vn+'.show', pk=str(self.id)) +
                        '" class="thumbnail"><img src="' + im.get_url_thumbnail(self.photo) +
                        '" alt="Photo" class="img-rounded img-responsive"></a>')
        else:
            return Markup('<a href="' + url_for(vn, pk=str(self.id)) +
                        '" class="thumbnail"><img src="//:0" alt="Photo" class="img-responsive"></a>')


    def print_button(self):
        vn = self.ViewName()
        #pdf = render_pdf(url_for(vn, pk=str(self.id)))
        #pdf = pdfkit.from_string(url_for(vn, pk=str(self.id)))
        #response = make_response(pdf)
        #response.headers['Content-Type'] = 'application/pdf'
        #response.headers['Content-Disposition'] = 'inline; filename=output.pdf'

        return Markup(
            '<a href="' + url_for(vn) + '" class="btn btn-sm btn-primary" data-toggle="tooltip" rel="tooltip"'+
            'title="Print">' +
            '<i class="fa fa-edit"></i>' +
            '</a>')

    def audio_play(self):
        vn = self.ViewName()
        return Markup(
                '<audio controls autoplay>' +
                '<source  src="' + url_for(vn) + '" type="audio/mpeg"'> +'<i class="fa fa-volume-up"></i>' +
                'Your browser does not support the audio element.' +
                '</audio>'
                )
    # edit_form_extra_fields = {'field2': TextField('field2',
    #                             widget=BS3TextFieldROWidget())}
    id = Column(Integer, primary_key=True, autoincrement=True)
    gender = Column(ForeignKey(u'gender.id'), index=True)
    barnumber = Column(String(20))
    law_firm = Column(ForeignKey(u'lawfirm.id'), index=True)
    admissiondate = Column(Date)

    gender1 = relationship(u'Gender', primaryjoin='Lawyer.gender == Gender.id', backref=u'lawyers')
    lawfirm = relationship(u'Lawfirm', primaryjoin='Lawyer.law_firm == Lawfirm.id', backref=u'lawyers')


class Medevent(ActivityMixin, AuditMixin, Model):
    __versioned__ = {}
    __tablename__ = 'medevent'

    id = Column(Integer, primary_key=True, autoincrement=True)


class Natureofsuit(RefTypeMixin, AuditMixin, Model):
    __versioned__ = {}
    __tablename__ = 'natureofsuit'

    id = Column(Integer, primary_key=True, autoincrement=True)


class Payment(AuditMixin, Model):
    __versioned__ = {}
    __tablename__ = 'payment'

    id = Column(Integer, primary_key=True, autoincrement=True)
    datepaid = Column(DateTime, default=func.now())
    amount = Column(Numeric(12, 2))
    paymentreference = Column(String(80), nullable=False)
    paymentconfirmed = Column(Boolean)
    paidby = Column(Text, nullable=False)
    msisdn = Column(Text)
    receiptnumber = Column(String(100), nullable=False)
    ispartial = Column(Boolean)
    bail = Column(ForeignKey(u'bail.id'), nullable=False, index=True)
    billrefnumber = Column(Text, nullable=False)
    payment_method = Column(ForeignKey(u'paymentmethod.id'), nullable=False, index=True)
    paymentdescription = Column(Text, nullable=False)
    case = Column(ForeignKey(u'case.id'), index=True)

    bail1 = relationship(u'Bail', primaryjoin='Payment.bail == Bail.id', backref=u'payments')
    case1 = relationship(u'Case', primaryjoin='Payment.case == Case.id', backref=u'payments')
    paymentmethod = relationship(u'Paymentmethod', primaryjoin='Payment.payment_method == Paymentmethod.id', backref=u'payments')


class Paymentmethod(RefTypeMixin, AuditMixin, Model):
    __versioned__ = {}
    __tablename__ = 'paymentmethod'

    id = Column(Integer, primary_key=True, autoincrement=True)
    key = Column(Text, nullable=False)
    secret = Column(Text, nullable=False)
    portal = Column(Text, nullable=False)
    tillnumber = Column(Text, nullable=False)
    shortcode = Column(Text, nullable=False)


class Plaintiff(PersonMixin, ContactMixin,  AuditMixin, Model):
    __versioned__ = {}
    __tablename__ = 'plaintiff'

    def ViewName(self):
        return self.__class__.__name__ +'View'

    def photo_img(self):
        im = ImageManager()
        vn = self.ViewName()
        if self.photo:
            return Markup('<a href="' + url_for(vn+'.show', pk=str(self.id)) +
                        '" class="thumbnail"><img src="' + im.get_url(self.photo) +
                        '" alt="Photo" class="img-rounded img-responsive"></a>')
        else:
            return Markup('<a href="' + url_for(vn, pk=str(self.id)) +
                        '" class="thumbnail"><img src="//:0" alt="Photo" class="img-responsive"></a>')

    def photo_img_thumbnail(self):
        im = ImageManager()
        vn = self.ViewName()
        if self.photo:
            return Markup('<a href="' + url_for(vn+'.show', pk=str(self.id)) +
                        '" class="thumbnail"><img src="' + im.get_url_thumbnail(self.photo) +
                        '" alt="Photo" class="img-rounded img-responsive"></a>')
        else:
            return Markup('<a href="' + url_for(vn, pk=str(self.id)) +
                        '" class="thumbnail"><img src="//:0" alt="Photo" class="img-responsive"></a>')


    def print_button(self):
        vn = self.ViewName()
        #pdf = render_pdf(url_for(vn, pk=str(self.id)))
        #pdf = pdfkit.from_string(url_for(vn, pk=str(self.id)))
        #response = make_response(pdf)
        #response.headers['Content-Type'] = 'application/pdf'
        #response.headers['Content-Disposition'] = 'inline; filename=output.pdf'

        return Markup(
            '<a href="' + url_for(vn) + '" class="btn btn-sm btn-primary" data-toggle="tooltip" rel="tooltip"'+
            'title="Print">' +
            '<i class="fa fa-edit"></i>' +
            '</a>')

    def audio_play(self):
        vn = self.ViewName()
        return Markup(
                '<audio controls autoplay>' +
                '<source  src="' + url_for(vn) + '" type="audio/mpeg"'> +'<i class="fa fa-volume-up"></i>' +
                'Your browser does not support the audio element.' +
                '</audio>'
                )
    # edit_form_extra_fields = {'field2': TextField('field2',
    #                             widget=BS3TextFieldROWidget())}
    id = Column(Integer, primary_key=True, autoincrement=True)
    gender = Column(ForeignKey(u'gender.id'), index=True)
    juvenile = Column(Boolean)

    gender1 = relationship(u'Gender', primaryjoin='Plaintiff.gender == Gender.id', backref=u'plaintiffs')


class Policerank(RefTypeMixin, AuditMixin, Model):
    __versioned__ = {}
    __tablename__ = 'policerank'

    id = Column(Integer, primary_key=True, autoincrement=True)


class Policerole(RefTypeMixin, AuditMixin, Model):
    __versioned__ = {}
    __tablename__ = 'policerole'

    id = Column(Integer, primary_key=True, autoincrement=True)

    polofficer = relationship(u'Polofficer', secondary='polofficer_policerole', backref=u'policeroles')


class Policestation(RefTypeMixin, PlaceMixin, AuditMixin, Model):
    __versioned__ = {}
    __tablename__ = 'policestation'

    id = Column(Integer, primary_key=True, autoincrement=True)
    town = Column(ForeignKey(u'town.id'), nullable=False, index=True)
    has_forensic_lab = Column(Boolean, default=False)
    officercommanding = Column(String(100))
    police_station_type = Column(ForeignKey(u'policestationtype.id'), nullable=False, index=True)

    policestationtype = relationship(u'Policestationtype', primaryjoin='Policestation.police_station_type == Policestationtype.id', backref=u'policestations')
    town1 = relationship(u'Town', primaryjoin='Policestation.town == Town.id', backref=u'policestations')


class Policestationtype(RefTypeMixin, AuditMixin, Model):
    __versioned__ = {}
    __tablename__ = 'policestationtype'

    id = Column(Integer, primary_key=True, autoincrement=True)


class Polofficer(AuditMixin, Model):
    __versioned__ = {}
    __tablename__ = 'polofficer'

    id = Column(Integer, primary_key=True, autoincrement=True)
    police_rank = Column(ForeignKey(u'policerank.id'), nullable=False, index=True)
    gender = Column(ForeignKey(u'gender.id'), nullable=False, index=True)
    servicenumber = Column(Text)
    reports_to = Column(ForeignKey(u'polofficer.id'), index=True)
    pol_supervisor = Column(ForeignKey(u'case.id'), nullable=False, index=True)
    postdate = Column(Date)

    gender1 = relationship(u'Gender', primaryjoin='Polofficer.gender == Gender.id', backref=u'polofficers')
    case = relationship(u'Case', primaryjoin='Polofficer.pol_supervisor == Case.id', backref=u'polofficers')
    policerank = relationship(u'Policerank', primaryjoin='Polofficer.police_rank == Policerank.id', backref=u'polofficers')
    parent = relationship(u'Polofficer', remote_side=[id], primaryjoin='Polofficer.reports_to == Polofficer.id', backref=u'polofficers')


polofficer_policerole = Table(
    'polofficer_policerole', Model.metadata,
    Column('polofficer', ForeignKey(u'polofficer.id'), primary_key=True, nullable=False),
    Column('policerole', ForeignKey(u'policerole.id'), primary_key=True, nullable=False, index=True)
)


class Prison(PlaceMixin, AuditMixin, Model):
    __versioned__ = {}
    __tablename__ = 'prison'

    id = Column(Integer, primary_key=True, autoincrement=True)
    town = Column(ForeignKey(u'town.id'), nullable=False, index=True)
    warden = Column(String(100))
    capacity = Column(Integer)
    population = Column(Integer)
    cellcount = Column(Integer)
    gatecount = Column(Integer)

    town1 = relationship(u'Town', primaryjoin='Prison.town == Town.id', backref=u'prisons')
    securityrank = relationship(u'Securityrank', secondary='prison_securityrank', backref=u'prisons')


prison_securityrank = Table(
    'prison_securityrank', Model.metadata,
    Column('prison', ForeignKey(u'prison.id'), primary_key=True, nullable=False),
    Column('securityrank', ForeignKey(u'securityrank.id'), primary_key=True, nullable=False, index=True)
)


class Prisoncell(AuditMixin, Model):
    __versioned__ = {}
    __tablename__ = 'prisoncell'

    id = Column(Integer, primary_key=True, autoincrement=True)
    prison = Column(ForeignKey(u'prison.id'), nullable=False, index=True)

    prison1 = relationship(u'Prison', primaryjoin='Prisoncell.prison == Prison.id', backref=u'prisoncells')


class Prisoncommital(ActivityMixin, AuditMixin, Model):
    __versioned__ = {}
    __tablename__ = 'prisoncommital'

    prison = Column(ForeignKey(u'prison.id'), primary_key=True, nullable=False)
    warrantno = Column(String(100), primary_key=True, nullable=False)
    defendant = Column(ForeignKey(u'defendant.id'), nullable=False, index=True)
    hearing = Column(ForeignKey(u'hearing.id'), nullable=False, index=True)
    warrantdate = Column(DateTime, default=func.now())
    hascourtdate = Column(Boolean)
    judicial_officer_warrant = Column(ForeignKey(u'judicialofficer.id'), nullable=False, index=True)
    warrant = Column(Text, nullable=False)
    warrantduration = Column(Integer, nullable=False, default=7)
    warrantexpiry = Column(DateTime)
    
    @observes("warrantdate", "warrantduration")
    def warrant_expiration_observer(self, warrantdate, warrantduration):
	    self.warrantexpiry = warrantdate + datetime.timedelta(warrantduration)
    
    history = Column(Text, nullable=False)
    earliestrelease = Column(Date)
    releasedate = Column(DateTime)
    property = Column(Text)
    itemcount = Column(Integer)
    releasenotes = Column(Text)
    commitalnotes = Column(Text)
    police_officer_commiting = Column(ForeignKey(u'polofficer.id'), nullable=False, index=True)
    paroledate = Column(Date)
    escaped = Column(Boolean)
    escapedate = Column(DateTime)
    escapedetails = Column(Text)

    defendant1 = relationship(u'Defendant', primaryjoin='Prisoncommital.defendant == Defendant.id', backref=u'prisoncommitals')
    hearing1 = relationship(u'Hearing', primaryjoin='Prisoncommital.hearing == Hearing.id', backref=u'prisoncommitals')
    judicialofficer = relationship(u'Judicialofficer', primaryjoin='Prisoncommital.judicial_officer_warrant == Judicialofficer.id', backref=u'prisoncommitals')
    polofficer = relationship(u'Polofficer', primaryjoin='Prisoncommital.police_officer_commiting == Polofficer.id', backref=u'prisoncommitals')
    prison1 = relationship(u'Prison', primaryjoin='Prisoncommital.prison == Prison.id', backref=u'prisoncommitals')
    warder = relationship(u'Warder', secondary='prisoncommital_warder', backref=u'prisoncommitals')


prisoncommital_warder = Table(
    'prisoncommital_warder', Model.metadata,
    Column('prisoncommital_prison', Integer, primary_key=True, nullable=False),
    Column('prisoncommital_warrantno', String(100), primary_key=True, nullable=False),
    Column('warder', ForeignKey(u'warder.id'), primary_key=True, nullable=False, index=True),
    ForeignKeyConstraint(['prisoncommital_prison', 'prisoncommital_warrantno'], [u'prisoncommital.prison', u'prisoncommital.warrantno'])
)


class Prisonerproperty(RefTypeMixin, AuditMixin, Model):
    __versioned__ = {}
    __tablename__ = 'prisonerproperty'
    __table_args__ = (
        ForeignKeyConstraint(['prison_commital_prison', 'prison_commital_warrantno'], [u'prisoncommital.prison', u'prisoncommital.warrantno']),
        Index('idx_prisonerproperty__prison_commital_prison_prison_commital_wa', 'prison_commital_prison', 'prison_commital_warrantno')
    )

    id = Column(Integer, primary_key=True, autoincrement=True)
    prison_commital_prison = Column(Integer, nullable=False)
    prison_commital_warrantno = Column(String(100), nullable=False)
    receipted = Column(Boolean)

    prisoncommital = relationship(u'Prisoncommital', primaryjoin='and_(Prisonerproperty.prison_commital_prison == Prisoncommital.prison, Prisonerproperty.prison_commital_warrantno == Prisoncommital.warrantno)', backref=u'prisonerproperties')


class Prosecutor(PersonMixin, ContactMixin,  AuditMixin, Model):
    __versioned__ = {}
    __tablename__ = 'prosecutor'

    def ViewName(self):
        return self.__class__.__name__ +'View'

    def photo_img(self):
        im = ImageManager()
        vn = self.ViewName()
        if self.photo:
            return Markup('<a href="' + url_for(vn+'.show', pk=str(self.id)) +
                        '" class="thumbnail"><img src="' + im.get_url(self.photo) +
                        '" alt="Photo" class="img-rounded img-responsive"></a>')
        else:
            return Markup('<a href="' + url_for(vn, pk=str(self.id)) +
                        '" class="thumbnail"><img src="//:0" alt="Photo" class="img-responsive"></a>')

    def photo_img_thumbnail(self):
        im = ImageManager()
        vn = self.ViewName()
        if self.photo:
            return Markup('<a href="' + url_for(vn+'.show', pk=str(self.id)) +
                        '" class="thumbnail"><img src="' + im.get_url_thumbnail(self.photo) +
                        '" alt="Photo" class="img-rounded img-responsive"></a>')
        else:
            return Markup('<a href="' + url_for(vn, pk=str(self.id)) +
                        '" class="thumbnail"><img src="//:0" alt="Photo" class="img-responsive"></a>')


    def print_button(self):
        vn = self.ViewName()
        #pdf = render_pdf(url_for(vn, pk=str(self.id)))
        #pdf = pdfkit.from_string(url_for(vn, pk=str(self.id)))
        #response = make_response(pdf)
        #response.headers['Content-Type'] = 'application/pdf'
        #response.headers['Content-Disposition'] = 'inline; filename=output.pdf'

        return Markup(
            '<a href="' + url_for(vn) + '" class="btn btn-sm btn-primary" data-toggle="tooltip" rel="tooltip"'+
            'title="Print">' +
            '<i class="fa fa-edit"></i>' +
            '</a>')

    def audio_play(self):
        vn = self.ViewName()
        return Markup(
                '<audio controls autoplay>' +
                '<source  src="' + url_for(vn) + '" type="audio/mpeg"'> +'<i class="fa fa-volume-up"></i>' +
                'Your browser does not support the audio element.' +
                '</audio>'
                )
    # edit_form_extra_fields = {'field2': TextField('field2',
    #                             widget=BS3TextFieldROWidget())}
    id = Column(Integer, primary_key=True, autoincrement=True)
    gender = Column(ForeignKey(u'gender.id'), index=True)

    gender1 = relationship(u'Gender', primaryjoin='Prosecutor.gender == Gender.id', backref=u'prosecutors')
    prosecutorteam = relationship(u'Prosecutorteam', secondary='prosecutor_prosecutorteam', backref=u'prosecutors')


prosecutor_prosecutorteam = Table(
    'prosecutor_prosecutorteam', Model.metadata,
    Column('prosecutor', ForeignKey(u'prosecutor.id'), primary_key=True, nullable=False),
    Column('prosecutorteam', ForeignKey(u'prosecutorteam.id'), primary_key=True, nullable=False, index=True)
)


class Prosecutorteam(RefTypeMixin, AuditMixin, Model):
    __versioned__ = {}
    __tablename__ = 'prosecutorteam'

    id = Column(Integer, primary_key=True, autoincrement=True)


class Remission(AuditMixin, Model):
    __versioned__ = {}
    __tablename__ = 'remission'
    __table_args__ = (
        ForeignKeyConstraint(['prison_commital_prison', 'prison_commital_warrantno'], [u'prisoncommital.prison', u'prisoncommital.warrantno']),
        Index('idx_remission__prison_commital_prison_prison_commital_warrantno', 'prison_commital_prison', 'prison_commital_warrantno')
    )

    id = Column(Integer, primary_key=True, autoincrement=True)
    prison_commital_prison = Column(Integer, nullable=False)
    prison_commital_warrantno = Column(String(100), nullable=False)
    daysearned = Column(Integer)
    dateearned = Column(Date)
    amount = Column(Numeric(12, 2))

    prisoncommital = relationship(u'Prisoncommital', primaryjoin='and_(Remission.prison_commital_prison == Prisoncommital.prison, Remission.prison_commital_warrantno == Prisoncommital.warrantno)', backref=u'remissions')


class Securityrank(RefTypeMixin, AuditMixin, Model):
    __versioned__ = {}
    __tablename__ = 'securityrank'

    id = Column(Integer, primary_key=True, autoincrement=True)

    def __repr__(self):
        return self.name


class Subcounty(AuditMixin,RefTypeMixin, Model):
    __versioned__ = {}
    __tablename__ = 'subcounty'

    id = Column(Integer, primary_key=True, autoincrement=True)
    county = Column(ForeignKey(u'county.id'), nullable=False, index=True)

    county1 = relationship(u'County', primaryjoin='Subcounty.county == County.id', backref=u'subcounty')
    
    def __repr__(self):
        return self.name


class Surety(PersonMixin, ContactMixin,  AuditMixin, Model):
    __versioned__ = {}
    __tablename__ = 'surety'

    def ViewName(self):
        return self.__class__.__name__ +'View'

    def photo_img(self):
        im = ImageManager()
        vn = self.ViewName()
        if self.photo:
            return Markup('<a href="' + url_for(vn+'.show', pk=str(self.id)) +
                        '" class="thumbnail"><img src="' + im.get_url(self.photo) +
                        '" alt="Photo" class="img-rounded img-responsive"></a>')
        else:
            return Markup('<a href="' + url_for(vn, pk=str(self.id)) +
                        '" class="thumbnail"><img src="//:0" alt="Photo" class="img-responsive"></a>')

    def photo_img_thumbnail(self):
        im = ImageManager()
        vn = self.ViewName()
        if self.photo:
            return Markup('<a href="' + url_for(vn+'.show', pk=str(self.id)) +
                        '" class="thumbnail"><img src="' + im.get_url_thumbnail(self.photo) +
                        '" alt="Photo" class="img-rounded img-responsive"></a>')
        else:
            return Markup('<a href="' + url_for(vn, pk=str(self.id)) +
                        '" class="thumbnail"><img src="//:0" alt="Photo" class="img-responsive"></a>')


    def print_button(self):
        vn = self.ViewName()
        #pdf = render_pdf(url_for(vn, pk=str(self.id)))
        #pdf = pdfkit.from_string(url_for(vn, pk=str(self.id)))
        #response = make_response(pdf)
        #response.headers['Content-Type'] = 'application/pdf'
        #response.headers['Content-Disposition'] = 'inline; filename=output.pdf'

        return Markup(
            '<a href="' + url_for(vn) + '" class="btn btn-sm btn-primary" data-toggle="tooltip" rel="tooltip"'+
            'title="Print">' +
            '<i class="fa fa-edit"></i>' +
            '</a>')

    def audio_play(self):
        vn = self.ViewName()
        return Markup(
                '<audio controls autoplay>' +
                '<source  src="' + url_for(vn) + '" type="audio/mpeg"'> +'<i class="fa fa-volume-up"></i>' +
                'Your browser does not support the audio element.' +
                '</audio>'
                )
    # edit_form_extra_fields = {'field2': TextField('field2',
    #                             widget=BS3TextFieldROWidget())}
    id = Column(Integer, primary_key=True, autoincrement=True)
    gender = Column(ForeignKey(u'gender.id'), index=True)

    gender1 = relationship(u'Gender', primaryjoin='Surety.gender == Gender.id', backref=u'sureties')


class Tag(AuditMixin, RefTypeMixin, Model):
    __versioned__ = {}
    __tablename__ = 'tag'

    id = Column(Integer, primary_key=True, autoincrement=True)

    def __repr__(self):
        return self.name


class Town(AuditMixin, RefTypeMixin, Model):
    __versioned__ = {}
    __tablename__ = 'town'

    id = Column(Integer, primary_key=True, autoincrement=True)
    subcounty = Column(ForeignKey(u'subcounty.id'), nullable=False, index=True)

    subcounty1 = relationship(u'Subcounty', primaryjoin='Town.subcounty == Subcounty.id', backref=u'towns')

    def __repr__(self):
        return self.name


class Visit(ActivityMixin, AuditMixin, Model):
    __versioned__ = {}
    __tablename__ = 'visit'

    vistors = Column(ForeignKey(u'visitor.id'), primary_key=True, nullable=False)
    defendants = Column(ForeignKey(u'defendant.id'), primary_key=True, nullable=False, index=True)
    visitdate = Column(DateTime, default=func.now())
    visitnotes = Column(Text)
    visitduration = Column(INTERVAL)

    defendant = relationship(u'Defendant', primaryjoin='Visit.defendants == Defendant.id', backref=u'visits')
    visitor = relationship(u'Visitor', primaryjoin='Visit.vistors == Visitor.id', backref=u'visits')


class Visitor(PersonMixin, ContactMixin,  AuditMixin, Model):
    __versioned__ = {}
    __tablename__ = 'visitor'

    def ViewName(self):
        return self.__class__.__name__ +'View'

    def photo_img(self):
        im = ImageManager()
        vn = self.ViewName()
        if self.photo:
            return Markup('<a href="' + url_for(vn+'.show', pk=str(self.id)) +
                        '" class="thumbnail"><img src="' + im.get_url(self.photo) +
                        '" alt="Photo" class="img-rounded img-responsive"></a>')
        else:
            return Markup('<a href="' + url_for(vn, pk=str(self.id)) +
                        '" class="thumbnail"><img src="//:0" alt="Photo" class="img-responsive"></a>')

    def photo_img_thumbnail(self):
        im = ImageManager()
        vn = self.ViewName()
        if self.photo:
            return Markup('<a href="' + url_for(vn+'.show', pk=str(self.id)) +
                        '" class="thumbnail"><img src="' + im.get_url_thumbnail(self.photo) +
                        '" alt="Photo" class="img-rounded img-responsive"></a>')
        else:
            return Markup('<a href="' + url_for(vn, pk=str(self.id)) +
                        '" class="thumbnail"><img src="//:0" alt="Photo" class="img-responsive"></a>')


    def print_button(self):
        vn = self.ViewName()
        #pdf = render_pdf(url_for(vn, pk=str(self.id)))
        #pdf = pdfkit.from_string(url_for(vn, pk=str(self.id)))
        #response = make_response(pdf)
        #response.headers['Content-Type'] = 'application/pdf'
        #response.headers['Content-Disposition'] = 'inline; filename=output.pdf'

        return Markup(
            '<a href="' + url_for(vn) + '" class="btn btn-sm btn-primary" data-toggle="tooltip" rel="tooltip"'+
            'title="Print">' +
            '<i class="fa fa-edit"></i>' +
            '</a>')

    def audio_play(self):
        vn = self.ViewName()
        return Markup(
                '<audio controls autoplay>' +
                '<source  src="' + url_for(vn) + '" type="audio/mpeg"'> +'<i class="fa fa-volume-up"></i>' +
                'Your browser does not support the audio element.' +
                '</audio>'
                )
    # edit_form_extra_fields = {'field2': TextField('field2',
    #                             widget=BS3TextFieldROWidget())}
    id = Column(Integer, primary_key=True, autoincrement=True)
    gender = Column(ForeignKey(u'gender.id'), nullable=False, index=True)

    gender1 = relationship(u'Gender', primaryjoin='Visitor.gender == Gender.id', backref=u'visitors')


class Warder(PersonMixin, ContactMixin,  AuditMixin, Model):
    __versioned__ = {}
    __tablename__ = 'warder'

    def ViewName(self):
        return self.__class__.__name__ +'View'

    def photo_img(self):
        im = ImageManager()
        vn = self.ViewName()
        if self.photo:
            return Markup('<a href="' + url_for(vn+'.show', pk=str(self.id)) +
                        '" class="thumbnail"><img src="' + im.get_url(self.photo) +
                        '" alt="Photo" class="img-rounded img-responsive"></a>')
        else:
            return Markup('<a href="' + url_for(vn, pk=str(self.id)) +
                        '" class="thumbnail"><img src="//:0" alt="Photo" class="img-responsive"></a>')

    def photo_img_thumbnail(self):
        im = ImageManager()
        vn = self.ViewName()
        if self.photo:
            return Markup('<a href="' + url_for(vn+'.show', pk=str(self.id)) +
                        '" class="thumbnail"><img src="' + im.get_url_thumbnail(self.photo) +
                        '" alt="Photo" class="img-rounded img-responsive"></a>')
        else:
            return Markup('<a href="' + url_for(vn, pk=str(self.id)) +
                        '" class="thumbnail"><img src="//:0" alt="Photo" class="img-responsive"></a>')


    def print_button(self):
        vn = self.ViewName()
        #pdf = render_pdf(url_for(vn, pk=str(self.id)))
        #pdf = pdfkit.from_string(url_for(vn, pk=str(self.id)))
        #response = make_response(pdf)
        #response.headers['Content-Type'] = 'application/pdf'
        #response.headers['Content-Disposition'] = 'inline; filename=output.pdf'

        return Markup(
            '<a href="' + url_for(vn) + '" class="btn btn-sm btn-primary" data-toggle="tooltip" rel="tooltip"'+
            'title="Print">' +
            '<i class="fa fa-edit"></i>' +
            '</a>')

    def audio_play(self):
        vn = self.ViewName()
        return Markup(
                '<audio controls autoplay>' +
                '<source  src="' + url_for(vn) + '" type="audio/mpeg"'> +'<i class="fa fa-volume-up"></i>' +
                'Your browser does not support the audio element.' +
                '</audio>'
                )
    # edit_form_extra_fields = {'field2': TextField('field2',
    #                             widget=BS3TextFieldROWidget())}
    id = Column(Integer, primary_key=True, autoincrement=True)
    prison = Column(ForeignKey(u'prison.id'), nullable=False, index=True)
    warder_rank = Column(ForeignKey(u'warderrank.id'), nullable=False, index=True)
    reports_to = Column(ForeignKey(u'warder.id'), index=True)

    prison1 = relationship(u'Prison', primaryjoin='Warder.prison == Prison.id', backref=u'warders')
    parent = relationship(u'Warder', remote_side=[id], primaryjoin='Warder.reports_to == Warder.id', backref=u'warders')
    warderrank = relationship(u'Warderrank', primaryjoin='Warder.warder_rank == Warderrank.id', backref=u'warders')


class Warderrank(RefTypeMixin, AuditMixin, Model):
    __versioned__ = {}
    __tablename__ = 'warderrank'

    id = Column(Integer, primary_key=True, autoincrement=True)


class Witnes(PersonMixin, ContactMixin,  AuditMixin, Model):
    __versioned__ = {}
    __tablename__ = 'witness'

    def ViewName(self):
        return self.__class__.__name__ +'View'

    def photo_img(self):
        im = ImageManager()
        vn = self.ViewName()
        if self.photo:
            return Markup('<a href="' + url_for(vn+'.show', pk=str(self.id)) +
                        '" class="thumbnail"><img src="' + im.get_url(self.photo) +
                        '" alt="Photo" class="img-rounded img-responsive"></a>')
        else:
            return Markup('<a href="' + url_for(vn, pk=str(self.id)) +
                        '" class="thumbnail"><img src="//:0" alt="Photo" class="img-responsive"></a>')

    def photo_img_thumbnail(self):
        im = ImageManager()
        vn = self.ViewName()
        if self.photo:
            return Markup('<a href="' + url_for(vn+'.show', pk=str(self.id)) +
                        '" class="thumbnail"><img src="' + im.get_url_thumbnail(self.photo) +
                        '" alt="Photo" class="img-rounded img-responsive"></a>')
        else:
            return Markup('<a href="' + url_for(vn, pk=str(self.id)) +
                        '" class="thumbnail"><img src="//:0" alt="Photo" class="img-responsive"></a>')


    def print_button(self):
        vn = self.ViewName()
        #pdf = render_pdf(url_for(vn, pk=str(self.id)))
        #pdf = pdfkit.from_string(url_for(vn, pk=str(self.id)))
        #response = make_response(pdf)
        #response.headers['Content-Type'] = 'application/pdf'
        #response.headers['Content-Disposition'] = 'inline; filename=output.pdf'

        return Markup(
            '<a href="' + url_for(vn) + '" class="btn btn-sm btn-primary" data-toggle="tooltip" rel="tooltip"'+
            'title="Print">' +
            '<i class="fa fa-edit"></i>' +
            '</a>')

    def audio_play(self):
        vn = self.ViewName()
        return Markup(
                '<audio controls autoplay>' +
                '<source  src="' + url_for(vn) + '" type="audio/mpeg"'> +'<i class="fa fa-volume-up"></i>' +
                'Your browser does not support the audio element.' +
                '</audio>'
                )
    # edit_form_extra_fields = {'field2': TextField('field2',
    #                             widget=BS3TextFieldROWidget())}
    id = Column(Integer, primary_key=True, autoincrement=True)
    fordefense = Column(Boolean)
    gender = Column(ForeignKey(u'gender.id'), nullable=False, index=True)

    gender1 = relationship(u'Gender', primaryjoin='Witnes.gender == Gender.id', backref=u'witness')


class DocStore(NameMixin, Model):
	id = Column(Integer, primary_key=True, autoincrement=True)
	data = Column(LargeBinary)
