# coding: utf-8
# AUTOGENERATED BY gen_script.sh from kpony3.py
# Copyright (C) Nyimbi Odero, Sat May 13 07:46:42 EAT 2017
 
from sqlalchemy import func
from flask_appbuilder import Model
from flask_appbuilder.models.mixins import AuditMixin, FileColumn, ImageColumn, UserExtensionMixin 
from flask_appbuilder.models.decorators import renders
from flask_appbuilder.filemanager import ImageManager
from sqlalchemy_utils import aggregated
from sqlalchemy.orm import relationship, query, defer, deferred

from sqlalchemy import (Column, Integer, String, ForeignKey,
	Sequence, Float, Text, BigInteger, Date,
	DateTime, Time, Boolean, CheckConstraint,
	UniqueConstraint, LargeBinary , Table)
from datetime import timedelta, datetime, date
from sqlalchemy.dialects.postgresql import *
from .mixins import *

# Here is how to extend the User model
#class UserExtended(Model, UserExtensionMixin):
#    contact_group_id = Column(Integer, ForeignKey('contact_group.id'), nullable=True)
#    contact_group = relationship('ContactGroup')


#db = SQLAlchemy()


class Attorney(db.Model):
    __tablename__ = 'attorney'

    id = db.Column(db.Integer, primary_key=True, server_default=db.FetchedValue())
    law_firm = db.Column(db.ForeignKey(u'lawfirm.id'), index=True)
    barnumber = db.Column(db.String(20), nullable=False)

    lawfirm = db.relationship(u'Lawfirm', primaryjoin='Attorney.law_firm == Lawfirm.id', backref=u'attorneys')
    hearing = db.relationship(u'Hearing', secondary='attorney_hearing', backref=u'attorneys')


attorney_hearing = db.Table(
    'attorney_hearing', Model.metadata, 
    db.Column('attorney', db.ForeignKey(u'attorney.id'), primary_key=True, nullable=False),
    db.Column('hearing', db.ForeignKey(u'hearing.id'), primary_key=True, nullable=False, index=True)
)


class Bail(db.Model):
    __tablename__ = 'bail'

    id = db.Column(db.Integer, primary_key=True, server_default=db.FetchedValue())
    hearing = db.Column(db.ForeignKey(u'hearing.id'), nullable=False, index=True)
    defendant = db.Column(db.ForeignKey(u'defendant.id'), nullable=False, index=True)
    amountgranted = db.Column(db.Float(53), nullable=False)
    noofsureties = db.Column(db.Integer, nullable=False)
    paid = db.Column(db.Boolean, nullable=False)
    paydate = db.Column(db.Date, nullable=False)
    receiptno = db.Column(db.String(100), nullable=False)

    defendant1 = db.relationship(u'Defendant', primaryjoin='Bail.defendant == Defendant.id', backref=u'bails')
    hearing1 = db.relationship(u'Hearing', primaryjoin='Bail.hearing == Hearing.id', backref=u'bails')
    surety = db.relationship(u'Surety', secondary='bail_surety', backref=u'bails')


bail_surety = db.Table(
    'bail_surety', Model.metadata, 
    db.Column('bail', db.ForeignKey(u'bail.id'), primary_key=True, nullable=False),
    db.Column('surety', db.ForeignKey(u'surety.id'), primary_key=True, nullable=False, index=True)
)


class Case(db.Model):
    __tablename__ = 'case'

    id = db.Column(db.Integer, primary_key=True, server_default=db.FetchedValue())
    casename = db.Column(db.String(200), nullable=False)
    investigationassigmentdate = db.Column(db.DateTime)
    investigationassignmentnote = db.Column(db.Text, nullable=False)
    investigationplan = db.Column(db.Text, nullable=False)
    initialreport = db.Column(db.Text, nullable=False)
    priority = db.Column(db.Integer, nullable=False)
    investigationsummary = db.Column(db.Text, nullable=False)
    agadvicerequested = db.Column(db.Boolean, nullable=False)
    sendtotrial = db.Column(db.Boolean, nullable=False)
    chargedate = db.Column(db.DateTime)
    agadvice = db.Column(db.Text, nullable=False)
    taketotrial = db.Column(db.Boolean, nullable=False)
    caseclosed = db.Column(db.Boolean, nullable=False)
    judgement = db.Column(db.Text, nullable=False)
    closeddate = db.Column(db.Date, nullable=False)
    sentencelength = db.Column(db.Integer, nullable=False)
    sentencestartdate = db.Column(db.Date, nullable=False)
    sentenceexpirydate = db.Column(db.Date, nullable=False)
    fineamount = db.Column(db.Float(53), nullable=False)
    caseappealed = db.Column(db.Boolean, nullable=False)
    appealdate = db.Column(db.DateTime, nullable=False)

    natureofsuit = db.relationship(u'Natureofsuit', secondary='case_natureofsuit', backref=u'cases')
    plaintiff = db.relationship(u'Plaintiff', secondary='case_plaintiff', backref=u'cases')
    policeman = db.relationship(u'Policeman', secondary='case_policeman_2', backref=u'policeman_cases')
    prosecutor = db.relationship(u'Prosecutor', secondary='case_prosecutor', backref=u'cases')
    policeman1 = db.relationship(u'Policeman', secondary='case_policeman', backref=u'policeman_cases_0')
    policestation = db.relationship(u'Policestation', secondary='case_policestation', backref=u'cases')
    observer = db.relationship(u'Observer', secondary='case_observer', backref=u'cases')
    defendant = db.relationship(u'Defendant', secondary='case_defendant', backref=u'cases')
    causeofaction = db.relationship(u'Causeofaction', secondary='case_causeofaction', backref=u'cases')


case_causeofaction = db.Table(
    'case_causeofaction', Model.metadata, 
    db.Column('case', db.ForeignKey(u'case.id'), primary_key=True, nullable=False),
    db.Column('causeofaction', db.ForeignKey(u'causeofaction.id'), primary_key=True, nullable=False, index=True)
)


case_defendant = db.Table(
    'case_defendant', Model.metadata, 
    db.Column('case', db.ForeignKey(u'case.id'), primary_key=True, nullable=False),
    db.Column('defendant', db.ForeignKey(u'defendant.id'), primary_key=True, nullable=False, index=True)
)


case_natureofsuit = db.Table(
    'case_natureofsuit', Model.metadata, 
    db.Column('case', db.ForeignKey(u'case.id'), primary_key=True, nullable=False),
    db.Column('natureofsuit', db.ForeignKey(u'natureofsuit.id'), primary_key=True, nullable=False, index=True)
)


case_observer = db.Table(
    'case_observer', Model.metadata, 
    db.Column('case', db.ForeignKey(u'case.id'), primary_key=True, nullable=False),
    db.Column('observer', db.ForeignKey(u'observer.id'), primary_key=True, nullable=False, index=True)
)


case_plaintiff = db.Table(
    'case_plaintiff', Model.metadata, 
    db.Column('case', db.ForeignKey(u'case.id'), primary_key=True, nullable=False),
    db.Column('plaintiff', db.ForeignKey(u'plaintiff.id'), primary_key=True, nullable=False, index=True)
)


case_policeman = db.Table(
    'case_policeman', Model.metadata, 
    db.Column('case', db.ForeignKey(u'case.id'), primary_key=True, nullable=False),
    db.Column('policeman', db.ForeignKey(u'policeman.id'), primary_key=True, nullable=False, index=True)
)


case_policeman_2 = db.Table(
    'case_policeman_2', Model.metadata, 
    db.Column('case', db.ForeignKey(u'case.id'), primary_key=True, nullable=False),
    db.Column('policeman', db.ForeignKey(u'policeman.id'), primary_key=True, nullable=False, index=True)
)


case_policestation = db.Table(
    'case_policestation', Model.metadata, 
    db.Column('case', db.ForeignKey(u'case.id'), primary_key=True, nullable=False),
    db.Column('policestation', db.ForeignKey(u'policestation.id'), primary_key=True, nullable=False, index=True)
)


case_prosecutor = db.Table(
    'case_prosecutor', Model.metadata, 
    db.Column('case', db.ForeignKey(u'case.id'), primary_key=True, nullable=False),
    db.Column('prosecutor', db.ForeignKey(u'prosecutor.id'), primary_key=True, nullable=False, index=True)
)


class Causeofaction(db.Model):
    __tablename__ = 'causeofaction'

    id = db.Column(db.Integer, primary_key=True, server_default=db.FetchedValue())
    criminal = db.Column(db.Boolean, nullable=False)
    parent_coa = db.Column(db.ForeignKey(u'causeofaction.id'), index=True)

    parent = db.relationship(u'Causeofaction', remote_side=[id], primaryjoin='Causeofaction.parent_coa == Causeofaction.id', backref=u'causeofactions')
    filing = db.relationship(u'Filing', secondary='causeofaction_filing', backref=u'causeofactions')
    hearing = db.relationship(u'Hearing', secondary='causeofaction_hearing', backref=u'causeofactions')


causeofaction_filing = db.Table(
    'causeofaction_filing', Model.metadata, 
    db.Column('causeofaction', db.ForeignKey(u'causeofaction.id'), primary_key=True, nullable=False),
    db.Column('filing', db.ForeignKey(u'filing.id'), primary_key=True, nullable=False, index=True)
)


causeofaction_hearing = db.Table(
    'causeofaction_hearing', Model.metadata, 
    db.Column('causeofaction', db.ForeignKey(u'causeofaction.id'), primary_key=True, nullable=False),
    db.Column('hearing', db.ForeignKey(u'hearing.id'), primary_key=True, nullable=False, index=True)
)


class Constituency(db.Model):
    __tablename__ = 'constituency'

    id = db.Column(db.Integer, primary_key=True, server_default=db.FetchedValue())
    county = db.Column(db.ForeignKey(u'county.id'), nullable=False, index=True)
    town = db.Column(db.ForeignKey(u'town.id'), index=True)

    county1 = db.relationship(u'County', primaryjoin='Constituency.county == County.id', backref=u'constituencies')
    town1 = db.relationship(u'Town', primaryjoin='Constituency.town == Town.id', backref=u'constituencies')


class County(db.Model):
    __tablename__ = 'county'

    id = db.Column(db.Integer, primary_key=True, server_default=db.FetchedValue())


class Court(db.Model):
    __tablename__ = 'court'

    id = db.Column(db.Integer, primary_key=True, server_default=db.FetchedValue())
    town = db.Column(db.ForeignKey(u'town.id'), nullable=False, index=True)
    residentmagistrate = db.Column(db.String(100))
    registrar = db.Column(db.String(100), nullable=False)
    court_level = db.Column(db.ForeignKey(u'courtlevel.id'), nullable=False, index=True)

    courtlevel = db.relationship(u'Courtlevel', primaryjoin='Court.court_level == Courtlevel.id', backref=u'courts')
    town1 = db.relationship(u'Town', primaryjoin='Court.town == Town.id', backref=u'courts')


class Courtlevel(db.Model):
    __tablename__ = 'courtlevel'

    id = db.Column(db.Integer, primary_key=True, server_default=db.FetchedValue())


class Defendant(db.Model):
    __tablename__ = 'defendant'

    id = db.Column(db.Integer, primary_key=True, server_default=db.FetchedValue())

    hearing = db.relationship(u'Hearing', secondary='defendant_hearing', backref=u'defendants')


defendant_hearing = db.Table(
    'defendant_hearing', Model.metadata, 
    db.Column('defendant', db.ForeignKey(u'defendant.id'), primary_key=True, nullable=False),
    db.Column('hearing', db.ForeignKey(u'hearing.id'), primary_key=True, nullable=False, index=True)
)


class Doctemplate(db.Model):
    __tablename__ = 'doctemplate'

    id = db.Column(db.Integer, primary_key=True, server_default=db.FetchedValue())
    template = db.Column(db.Text, nullable=False)
    templatejson = db.Column(db.JSON, nullable=False)

    filing = db.relationship(u'Filing', secondary='doctemplate_filing', backref=u'doctemplates')


doctemplate_filing = db.Table(
    'doctemplate_filing', Model.metadata, 
    db.Column('doctemplate', db.ForeignKey(u'doctemplate.id'), primary_key=True, nullable=False),
    db.Column('filing', db.ForeignKey(u'filing.id'), primary_key=True, nullable=False, index=True)
)


class Filing(db.Model):
    __tablename__ = 'filing'

    id = db.Column(db.Integer, primary_key=True, server_default=db.FetchedValue())
    filedate = db.Column(db.DateTime, nullable=False)
    totalfees = db.Column(db.Float(53), nullable=False)
    filing_attorney = db.Column(db.ForeignKey(u'attorney.id'), nullable=False, index=True)
    filing_prosecutor = db.Column(db.ForeignKey(u'prosecutor.id'), nullable=False, index=True)
    receiptnumber = db.Column(db.Text)
    receiptverified = db.Column(db.Boolean, nullable=False)
    amountpaid = db.Column(db.Float(53), nullable=False)
    feebalance = db.Column(db.Float(53), nullable=False)
    paymenthistory = db.Column(db.Text, nullable=False)
    doctype = db.Column(db.String(100), nullable=False)
    doc = db.Column(db.Text, nullable=False)
    docbin = db.Column(db.Text, nullable=False)
    docthumbnail = db.Column(db.LargeBinary, nullable=False)
    docjson = db.Column(db.JSON, nullable=False)
    pagecount = db.Column(db.Integer, nullable=False)
    binhash = db.Column(db.String(100), nullable=False)
    texthash = db.Column(db.String(100), nullable=False)

    attorney = db.relationship(u'Attorney', primaryjoin='Filing.filing_attorney == Attorney.id', backref=u'filings')
    prosecutor = db.relationship(u'Prosecutor', primaryjoin='Filing.filing_prosecutor == Prosecutor.id', backref=u'filings')
    filingtype = db.relationship(u'Filingtype', secondary='filing_filingtype', backref=u'filings')
    hearing = db.relationship(u'Hearing', secondary='filing_hearing', backref=u'filings')


filing_filingtype = db.Table(
    'filing_filingtype', Model.metadata, 
    db.Column('filing', db.ForeignKey(u'filing.id'), primary_key=True, nullable=False),
    db.Column('filingtype', db.ForeignKey(u'filingtype.id'), primary_key=True, nullable=False, index=True)
)


filing_hearing = db.Table(
    'filing_hearing', Model.metadata, 
    db.Column('filing', db.ForeignKey(u'filing.id'), primary_key=True, nullable=False),
    db.Column('hearing', db.ForeignKey(u'hearing.id'), primary_key=True, nullable=False, index=True)
)


class Filingtype(db.Model):
    __tablename__ = 'filingtype'

    id = db.Column(db.Integer, primary_key=True, server_default=db.FetchedValue())
    cost = db.Column(db.Float(53), nullable=False)
    perpagecost = db.Column(db.Float(53), nullable=False)


class Hearing(db.Model):
    __tablename__ = 'hearing'

    id = db.Column(db.Integer, primary_key=True, server_default=db.FetchedValue())
    hearingdate = db.Column(db.DateTime, nullable=False)
    adjourned = db.Column(db.Boolean, nullable=False)
    case = db.Column(db.ForeignKey(u'case.id'), nullable=False, index=True)
    court = db.Column(db.ForeignKey(u'court.id'), nullable=False, index=True)
    hearing_type = db.Column(db.ForeignKey(u'hearingtype.id'), nullable=False, index=True)
    remandwarrant = db.Column(db.Text, nullable=False)
    remandlength = db.Column(db.Integer)
    remanddate = db.Column(db.Date, nullable=False)
    remandwarrantexpirydate = db.Column(db.Date, nullable=False)
    nexthearingdate = db.Column(db.Date)
    finalhearing = db.Column(db.Boolean, nullable=False)
    transcript = db.Column(db.Text, nullable=False)
    audio = db.Column(db.LargeBinary, nullable=False)
    video = db.Column(db.LargeBinary, nullable=False)

    case1 = db.relationship(u'Case', primaryjoin='Hearing.case == Case.id', backref=u'hearings')
    court1 = db.relationship(u'Court', primaryjoin='Hearing.court == Court.id', backref=u'hearings')
    hearingtype = db.relationship(u'Hearingtype', primaryjoin='Hearing.hearing_type == Hearingtype.id', backref=u'hearings')
    prosecutor = db.relationship(u'Prosecutor', secondary='hearing_prosecutor', backref=u'hearings')
    judge = db.relationship(u'Judge', secondary='hearing_judge', backref=u'hearings')
    policeman = db.relationship(u'Policeman', secondary='hearing_policeman', backref=u'hearings')
    observer = db.relationship(u'Observer', secondary='hearing_observer', backref=u'hearings')


hearing_judge = db.Table(
    'hearing_judge', Model.metadata, 
    db.Column('hearing', db.ForeignKey(u'hearing.id'), primary_key=True, nullable=False),
    db.Column('judge', db.ForeignKey(u'judge.id'), primary_key=True, nullable=False, index=True)
)


hearing_observer = db.Table(
    'hearing_observer', Model.metadata, 
    db.Column('hearing', db.ForeignKey(u'hearing.id'), primary_key=True, nullable=False),
    db.Column('observer', db.ForeignKey(u'observer.id'), primary_key=True, nullable=False, index=True)
)


hearing_policeman = db.Table(
    'hearing_policeman', Model.metadata, 
    db.Column('hearing', db.ForeignKey(u'hearing.id'), primary_key=True, nullable=False),
    db.Column('policeman', db.ForeignKey(u'policeman.id'), primary_key=True, nullable=False, index=True)
)


hearing_prosecutor = db.Table(
    'hearing_prosecutor', Model.metadata, 
    db.Column('hearing', db.ForeignKey(u'hearing.id'), primary_key=True, nullable=False),
    db.Column('prosecutor', db.ForeignKey(u'prosecutor.id'), primary_key=True, nullable=False, index=True)
)


class Hearingtype(db.Model):
    __tablename__ = 'hearingtype'

    id = db.Column(db.Integer, primary_key=True, server_default=db.FetchedValue())


class Investigation(db.Model):
    __tablename__ = 'investigation'

    id = db.Column(db.Integer, primary_key=True, server_default=db.FetchedValue())
    case = db.Column(db.ForeignKey(u'case.id'), nullable=False, index=True)
    actiondate = db.Column(db.DateTime, nullable=False)
    evidence = db.Column(db.Text, nullable=False)
    narrative = db.Column(db.Text, nullable=False)
    weather = db.Column(db.Text, nullable=False)
    location = db.Column(db.Text, nullable=False)

    case1 = db.relationship(u'Case', primaryjoin='Investigation.case == Case.id', backref=u'investigations')
    observer = db.relationship(u'Observer', secondary='investigation_observer', backref=u'investigations')
    policeman = db.relationship(u'Policeman', secondary='investigation_policeman', backref=u'investigations')


investigation_observer = db.Table(
    'investigation_observer', Model.metadata, 
    db.Column('investigation', db.ForeignKey(u'investigation.id'), primary_key=True, nullable=False),
    db.Column('observer', db.ForeignKey(u'observer.id'), primary_key=True, nullable=False, index=True)
)


investigation_policeman = db.Table(
    'investigation_policeman', Model.metadata, 
    db.Column('investigation', db.ForeignKey(u'investigation.id'), primary_key=True, nullable=False),
    db.Column('policeman', db.ForeignKey(u'policeman.id'), primary_key=True, nullable=False, index=True)
)


class Judge(db.Model):
    __tablename__ = 'judge'

    id = db.Column(db.Integer, primary_key=True, server_default=db.FetchedValue())
    court = db.Column(db.ForeignKey(u'court.id'), nullable=False, index=True)

    court1 = db.relationship(u'Court', primaryjoin='Judge.court == Court.id', backref=u'judges')


class Lawfirm(db.Model):
    __tablename__ = 'lawfirm'

    id = db.Column(db.Integer, primary_key=True, server_default=db.FetchedValue())


class Natureofsuit(db.Model):
    __tablename__ = 'natureofsuit'

    id = db.Column(db.Integer, primary_key=True, server_default=db.FetchedValue())


class Observer(db.Model):
    __tablename__ = 'observer'

    id = db.Column(db.Integer, primary_key=True, server_default=db.FetchedValue())
    fordefense = db.Column(db.Boolean, nullable=False)


class Plaintiff(db.Model):
    __tablename__ = 'plaintiff'

    id = db.Column(db.Integer, primary_key=True, server_default=db.FetchedValue())


class Policeman(db.Model):
    __tablename__ = 'policeman'

    id = db.Column(db.Integer, primary_key=True, server_default=db.FetchedValue())

    policerole = db.relationship(u'Policerole', secondary='policerole_policeman', backref=u'policemen')


class Policerole(db.Model):
    __tablename__ = 'policerole'

    id = db.Column(db.Integer, primary_key=True, server_default=db.FetchedValue())


policerole_policeman = db.Table(
    'policerole_policeman', Model.metadata, 
    db.Column('policerole', db.ForeignKey(u'policerole.id'), primary_key=True, nullable=False),
    db.Column('policeman', db.ForeignKey(u'policeman.id'), primary_key=True, nullable=False, index=True)
)


class Policestation(db.Model):
    __tablename__ = 'policestation'

    id = db.Column(db.Integer, primary_key=True, server_default=db.FetchedValue())
    town = db.Column(db.ForeignKey(u'town.id'), nullable=False, index=True)
    officercommanding = db.Column(db.String(100))

    town1 = db.relationship(u'Town', primaryjoin='Policestation.town == Town.id', backref=u'policestations')


class Prison(db.Model):
    __tablename__ = 'prison'

    id = db.Column(db.Integer, primary_key=True, server_default=db.FetchedValue())
    town = db.Column(db.ForeignKey(u'town.id'), nullable=False, index=True)
    warden = db.Column(db.String(100))
    capacity = db.Column(db.Integer, nullable=False)
    population = db.Column(db.Integer, nullable=False)

    town1 = db.relationship(u'Town', primaryjoin='Prison.town == Town.id', backref=u'prisons')


class Prisonremand(db.Model):
    __tablename__ = 'prisonremand'

    prison = db.Column(db.ForeignKey(u'prison.id'), primary_key=True, nullable=False)
    warrantno = db.Column(db.String(100), primary_key=True, nullable=False)
    hearing = db.Column(db.ForeignKey(u'hearing.id'), nullable=False, index=True)
    defendant = db.Column(db.ForeignKey(u'defendant.id'), nullable=False, index=True)
    warrantduration = db.Column(db.Integer, nullable=False)
    warrantdate = db.Column(db.DateTime, nullable=False)
    warrant = db.Column(db.Text, nullable=False)
    warrantexpiry = db.Column(db.DateTime, nullable=False)
    history = db.Column(db.Text, nullable=False)

    defendant1 = db.relationship(u'Defendant', primaryjoin='Prisonremand.defendant == Defendant.id', backref=u'prisonremands')
    hearing1 = db.relationship(u'Hearing', primaryjoin='Prisonremand.hearing == Hearing.id', backref=u'prisonremands')
    prison1 = db.relationship(u'Prison', primaryjoin='Prisonremand.prison == Prison.id', backref=u'prisonremands')


class Prosecutor(db.Model):
    __tablename__ = 'prosecutor'

    id = db.Column(db.Integer, primary_key=True, server_default=db.FetchedValue())

    prosecutorteam = db.relationship(u'Prosecutorteam', secondary='prosecutor_prosecutorteam', backref=u'prosecutors')


prosecutor_prosecutorteam = db.Table(
    'prosecutor_prosecutorteam', Model.metadata, 
    db.Column('prosecutor', db.ForeignKey(u'prosecutor.id'), primary_key=True, nullable=False),
    db.Column('prosecutorteam', db.ForeignKey(u'prosecutorteam.id'), primary_key=True, nullable=False, index=True)
)


class Prosecutorteam(db.Model):
    __tablename__ = 'prosecutorteam'

    id = db.Column(db.Integer, primary_key=True, server_default=db.FetchedValue())


class Subcounty(db.Model):
    __tablename__ = 'subcounty'

    id = db.Column(db.Integer, primary_key=True, server_default=db.FetchedValue())
    county = db.Column(db.ForeignKey(u'county.id'), nullable=False, index=True)

    county1 = db.relationship(u'County', primaryjoin='Subcounty.county == County.id', backref=u'subcounties')


class Surety(db.Model):
    __tablename__ = 'surety'

    id = db.Column(db.Integer, primary_key=True, server_default=db.FetchedValue())


class Town(db.Model):
    __tablename__ = 'town'

    id = db.Column(db.Integer, primary_key=True, server_default=db.FetchedValue())
    subcounty = db.Column(db.ForeignKey(u'subcounty.id'), nullable=False, index=True)

    subcounty1 = db.relationship(u'Subcounty', primaryjoin='Town.subcounty == Subcounty.id', backref=u'towns')
